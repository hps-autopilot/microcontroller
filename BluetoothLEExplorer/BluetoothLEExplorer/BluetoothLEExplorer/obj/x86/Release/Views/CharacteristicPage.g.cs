#pragma checksum "C:\Users\tilt7\Documents\GitHub\BluetoothLEExplorer\BluetoothLEExplorer\BluetoothLEExplorer\Views\CharacteristicPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "48D287454786CD756A6E31D37AE74972"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BluetoothLEExplorer.Views
{
    partial class CharacteristicPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Template10_Controls_PageHeader_Frame(global::Template10.Controls.PageHeader obj, global::Windows.UI.Xaml.Controls.Frame value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Controls.Frame) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Controls.Frame), targetNullValue);
                }
                obj.Frame = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(global::Windows.UI.Xaml.Controls.ProgressRing obj, global::System.Boolean value)
            {
                obj.IsActive = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class CharacteristicPage_obj16_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICharacteristicPage_Bindings
        {
            private global::BluetoothLEExplorer.Models.ObservableGattDescriptors dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj16;
            private global::Windows.UI.Xaml.Documents.Run obj18;
            private global::Windows.UI.Xaml.Documents.Run obj20;
            private global::Windows.UI.Xaml.Documents.Run obj22;

            private CharacteristicPage_obj16_BindingsTracking bindingsTracking;

            public CharacteristicPage_obj16_Bindings()
            {
                this.bindingsTracking = new CharacteristicPage_obj16_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 16: // Views\CharacteristicPage.xaml line 279
                        this.obj16 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TextBlock)target);
                        break;
                    case 18: // Views\CharacteristicPage.xaml line 281
                        this.obj18 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 20: // Views\CharacteristicPage.xaml line 284
                        this.obj20 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 22: // Views\CharacteristicPage.xaml line 287
                        this.obj22 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj16.Target as global::Windows.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::BluetoothLEExplorer.Models.ObservableGattDescriptors) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // ICharacteristicPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Models.ObservableGattDescriptors obj, int phase)
            {
                CharacteristicPage_obj16_Bindings bindings = this;
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_Descriptor(obj.Descriptor, phase);
                        this.Update_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 281
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj18, obj, null);
                }
            }
            private void Update_Descriptor(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Descriptor_AttributeHandle(obj.AttributeHandle, phase);
                    }
                }
            }
            private void Update_Descriptor_AttributeHandle(global::System.UInt16 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 284
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj20, obj.ToString(), null);
                }
            }
            private void Update_Value(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 287
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj22, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class CharacteristicPage_obj16_BindingsTracking
            {
                private global::System.WeakReference<CharacteristicPage_obj16_Bindings> weakRefToBindingObj; 

                public CharacteristicPage_obj16_BindingsTracking(CharacteristicPage_obj16_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<CharacteristicPage_obj16_Bindings>(obj);
                }

                public CharacteristicPage_obj16_Bindings TryGetBindingObject()
                {
                    CharacteristicPage_obj16_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CharacteristicPage_obj16_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableGattDescriptors obj = sender as global::BluetoothLEExplorer.Models.ObservableGattDescriptors;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_Descriptor(obj.Descriptor, DATA_CHANGED);
                                bindings.Update_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Descriptor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Descriptor(obj.Descriptor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::BluetoothLEExplorer.Models.ObservableGattDescriptors obj)
                {
                    CharacteristicPage_obj16_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class CharacteristicPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICharacteristicPage_Bindings
        {
            private global::BluetoothLEExplorer.Views.CharacteristicPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Template10.Controls.PageHeader obj8;
            private global::Windows.UI.Xaml.Controls.ItemsControl obj11;
            private global::Windows.UI.Xaml.Controls.RelativePanel obj12;
            private global::Windows.UI.Xaml.Controls.ListView obj14;
            private global::Windows.UI.Xaml.Controls.CheckBox obj23;
            private global::Windows.UI.Xaml.Controls.StackPanel obj24;
            private global::Windows.UI.Xaml.Controls.StackPanel obj25;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj26;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj27;
            private global::Windows.UI.Xaml.Controls.TextBlock obj28;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj29;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj30;
            private global::Windows.UI.Xaml.Controls.TextBlock obj31;
            private global::Windows.UI.Xaml.Documents.Run obj32;
            private global::Windows.UI.Xaml.Controls.TextBox obj34;
            private global::Windows.UI.Xaml.Controls.Button obj35;
            private global::Windows.UI.Xaml.Controls.RelativePanel obj40;
            private global::Windows.UI.Xaml.Controls.Button obj43;
            private global::Windows.UI.Xaml.Controls.TextBlock obj49;
            private global::Windows.UI.Xaml.Controls.TextBlock obj51;
            private global::Windows.UI.Xaml.Documents.Run obj52;
            private global::Windows.UI.Xaml.Documents.Run obj53;
            private global::Windows.UI.Xaml.Documents.Run obj54;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj35Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj43Click;

            private CharacteristicPage_obj1_BindingsTracking bindingsTracking;

            public CharacteristicPage_obj1_Bindings()
            {
                this.bindingsTracking = new CharacteristicPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8: // Views\CharacteristicPage.xaml line 168
                        this.obj8 = (global::Template10.Controls.PageHeader)target;
                        break;
                    case 11: // Views\CharacteristicPage.xaml line 306
                        this.obj11 = (global::Windows.UI.Xaml.Controls.ItemsControl)target;
                        break;
                    case 12: // Views\CharacteristicPage.xaml line 229
                        this.obj12 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                        break;
                    case 14: // Views\CharacteristicPage.xaml line 271
                        this.obj14 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 23: // Views\CharacteristicPage.xaml line 249
                        this.obj23 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_23(this.obj23);
                        break;
                    case 24: // Views\CharacteristicPage.xaml line 250
                        this.obj24 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 25: // Views\CharacteristicPage.xaml line 259
                        this.obj25 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 26: // Views\CharacteristicPage.xaml line 260
                        this.obj26 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_26(this.obj26);
                        break;
                    case 27: // Views\CharacteristicPage.xaml line 262
                        this.obj27 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        break;
                    case 28: // Views\CharacteristicPage.xaml line 264
                        this.obj28 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 29: // Views\CharacteristicPage.xaml line 251
                        this.obj29 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_29(this.obj29);
                        break;
                    case 30: // Views\CharacteristicPage.xaml line 253
                        this.obj30 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        break;
                    case 31: // Views\CharacteristicPage.xaml line 255
                        this.obj31 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 32: // Views\CharacteristicPage.xaml line 245
                        this.obj32 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 34: // Views\CharacteristicPage.xaml line 231
                        this.obj34 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_34(this.obj34);
                        break;
                    case 35: // Views\CharacteristicPage.xaml line 234
                        this.obj35 = (global::Windows.UI.Xaml.Controls.Button)target;
                        this.obj35Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.WriteValue();
                        };
                        ((global::Windows.UI.Xaml.Controls.Button)target).Click += obj35Click;
                        break;
                    case 40: // Views\CharacteristicPage.xaml line 211
                        this.obj40 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                        break;
                    case 43: // Views\CharacteristicPage.xaml line 216
                        this.obj43 = (global::Windows.UI.Xaml.Controls.Button)target;
                        this.obj43Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.Characteristic.ReadValueAsync();
                        };
                        ((global::Windows.UI.Xaml.Controls.Button)target).Click += obj43Click;
                        break;
                    case 49: // Views\CharacteristicPage.xaml line 214
                        this.obj49 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 51: // Views\CharacteristicPage.xaml line 209
                        this.obj51 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 52: // Views\CharacteristicPage.xaml line 196
                        this.obj52 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 53: // Views\CharacteristicPage.xaml line 198
                        this.obj53 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 54: // Views\CharacteristicPage.xaml line 200
                        this.obj54 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            // ICharacteristicPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Views.CharacteristicPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Views.CharacteristicPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Frame(obj.Frame, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_Frame(global::Windows.UI.Xaml.Controls.Frame obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 168
                    XamlBindingSetters.Set_Template10_Controls_PageHeader_Frame(this.obj8, obj, null);
                }
            }
            private void Update_ViewModel(global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NotifyUser(obj.NotifyUser, phase);
                        this.Update_ViewModel_CharacteristicCanWrite(obj.CharacteristicCanWrite, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Characteristic(obj.Characteristic, phase);
                        this.Update_ViewModel_UseWindowsNotifications(obj.UseWindowsNotifications, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CharacteristicCanNotifyOrIndicate(obj.CharacteristicCanNotifyOrIndicate, phase);
                        this.Update_ViewModel_CharacteristicCanNotify(obj.CharacteristicCanNotify, phase);
                        this.Update_ViewModel_CharacteristicCanIndicate(obj.CharacteristicCanIndicate, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Indicate(obj.Indicate, phase);
                        this.Update_ViewModel_IndicateProgress(obj.IndicateProgress, phase);
                        this.Update_ViewModel_NotifyProgress(obj.NotifyProgress, phase);
                        this.Update_ViewModel_IndicateError(obj.IndicateError, phase);
                        this.Update_ViewModel_Notify(obj.Notify, phase);
                        this.Update_ViewModel_NotifyError(obj.NotifyError, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Properties(obj.Properties, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ValueToWrite(obj.ValueToWrite, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CharacteristicValueVisible(obj.CharacteristicValueVisible, phase);
                        this.Update_ViewModel_CharacteristicCanBeRead(obj.CharacteristicCanBeRead, phase);
                        this.Update_ViewModel_DeviceName(obj.DeviceName, phase);
                    }
                }
            }
            private void Update_ViewModel_NotifyUser(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 306
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj11, obj, null);
                }
            }
            private void Update_ViewModel_CharacteristicCanWrite(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 229
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Characteristic(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Characteristic(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Characteristic_Descriptors(obj.Descriptors, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Characteristic_Value(obj.Value, phase);
                        this.Update_ViewModel_Characteristic_Characteristic(obj.Characteristic, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Characteristic_Parent(obj.Parent, phase);
                        this.Update_ViewModel_Characteristic_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_ViewModel_Characteristic_Descriptors(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 271
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj14, obj, null);
                }
            }
            private void Update_ViewModel_UseWindowsNotifications(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 249
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj23, obj, null);
                }
            }
            private void Update_ViewModel_CharacteristicCanNotifyOrIndicate(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 249
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj23, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_CharacteristicCanNotify(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 250
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj24, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_CharacteristicCanIndicate(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 259
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj25, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Indicate(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 260
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj26, obj);
                }
            }
            private void Update_ViewModel_IndicateProgress(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 262
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj27, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_NotifyProgress(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 262
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(this.obj27, obj);
                    // Views\CharacteristicPage.xaml line 253
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj30, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    // Views\CharacteristicPage.xaml line 253
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(this.obj30, obj);
                }
            }
            private void Update_ViewModel_IndicateError(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 264
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj28, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Notify(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 251
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj29, obj);
                }
            }
            private void Update_ViewModel_NotifyError(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 255
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj31, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Properties(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 245
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj32, obj, null);
                }
            }
            private void Update_ViewModel_ValueToWrite(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 231
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj34, obj, null);
                }
            }
            private void Update_ViewModel_CharacteristicValueVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 211
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj40, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_CharacteristicCanBeRead(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 216
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj43, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Characteristic_Value(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 214
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj49, obj, null);
                }
            }
            private void Update_ViewModel_Characteristic_Characteristic(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Characteristic_Characteristic_AttributeHandle(obj.AttributeHandle, phase);
                    }
                }
            }
            private void Update_ViewModel_Characteristic_Characteristic_AttributeHandle(global::System.UInt16 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\CharacteristicPage.xaml line 209
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj51, obj.ToString(), null);
                }
            }
            private void Update_ViewModel_DeviceName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 196
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj52, obj, null);
                }
            }
            private void Update_ViewModel_Characteristic_Parent(global::BluetoothLEExplorer.Models.ObservableGattDeviceService obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Characteristic_Parent_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_ViewModel_Characteristic_Parent_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 198
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj53, obj, null);
                }
            }
            private void Update_ViewModel_Characteristic_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\CharacteristicPage.xaml line 200
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj54, obj, null);
                }
            }
            private void UpdateTwoWay_23_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.UseWindowsNotifications = (global::System.Boolean)this.obj23.IsChecked;
                        }
                    }
                }
            }
            private void UpdateTwoWay_26_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Indicate = this.obj26.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_29_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Notify = this.obj29.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_34_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.ValueToWrite = this.obj34.Text;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class CharacteristicPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<CharacteristicPage_obj1_Bindings> weakRefToBindingObj; 

                public CharacteristicPage_obj1_BindingsTracking(CharacteristicPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<CharacteristicPage_obj1_Bindings>(obj);
                }

                public CharacteristicPage_obj1_Bindings TryGetBindingObject()
                {
                    CharacteristicPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Characteristic(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CharacteristicPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Characteristic(obj.Characteristic, DATA_CHANGED);
                                bindings.Update_ViewModel_UseWindowsNotifications(obj.UseWindowsNotifications, DATA_CHANGED);
                                bindings.Update_ViewModel_Indicate(obj.Indicate, DATA_CHANGED);
                                bindings.Update_ViewModel_IndicateProgress(obj.IndicateProgress, DATA_CHANGED);
                                bindings.Update_ViewModel_NotifyProgress(obj.NotifyProgress, DATA_CHANGED);
                                bindings.Update_ViewModel_IndicateError(obj.IndicateError, DATA_CHANGED);
                                bindings.Update_ViewModel_Notify(obj.Notify, DATA_CHANGED);
                                bindings.Update_ViewModel_NotifyError(obj.NotifyError, DATA_CHANGED);
                                bindings.Update_ViewModel_ValueToWrite(obj.ValueToWrite, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Characteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Characteristic(obj.Characteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UseWindowsNotifications":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_UseWindowsNotifications(obj.UseWindowsNotifications, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Indicate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Indicate(obj.Indicate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IndicateProgress":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IndicateProgress(obj.IndicateProgress, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NotifyProgress":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NotifyProgress(obj.NotifyProgress, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IndicateError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IndicateError(obj.IndicateError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Notify":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Notify(obj.Notify, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NotifyError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NotifyError(obj.NotifyError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ValueToWrite":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ValueToWrite(obj.ValueToWrite, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Characteristic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CharacteristicPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj = sender as global::BluetoothLEExplorer.Models.ObservableGattCharacteristics;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Characteristic_Value(obj.Value, DATA_CHANGED);
                                bindings.Update_ViewModel_Characteristic_Characteristic(obj.Characteristic, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Characteristic_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Characteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Characteristic_Characteristic(obj.Characteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.Models.ObservableGattCharacteristics cache_ViewModel_Characteristic = null;
                public void UpdateChildListeners_ViewModel_Characteristic(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj)
                {
                    if (obj != cache_ViewModel_Characteristic)
                    {
                        if (cache_ViewModel_Characteristic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Characteristic).PropertyChanged -= PropertyChanged_ViewModel_Characteristic;
                            cache_ViewModel_Characteristic = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Characteristic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Characteristic;
                        }
                    }
                }
                public void RegisterTwoWayListener_23(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_23_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_26(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_26_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_29(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_29_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_34(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_34_Text();
                        }
                    };
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\CharacteristicPage.xaml line 1
                {
                    this.ThisPage = (global::Windows.UI.Xaml.Controls.Page)(target);
                }
                break;
            case 2: // Views\CharacteristicPage.xaml line 18
                {
                    this.ViewModel = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)(target);
                }
                break;
            case 3: // Views\CharacteristicPage.xaml line 52
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 4: // Views\CharacteristicPage.xaml line 56
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5: // Views\CharacteristicPage.xaml line 95
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\CharacteristicPage.xaml line 132
                {
                    this.VisualStateDisplayType = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 7: // Views\CharacteristicPage.xaml line 150
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 8: // Views\CharacteristicPage.xaml line 168
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 9: // Views\CharacteristicPage.xaml line 175
                {
                    this.Content = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 10: // Views\CharacteristicPage.xaml line 295
                {
                    this.Notify = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 13: // Views\CharacteristicPage.xaml line 243
                {
                    this.TextProperties = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 14: // Views\CharacteristicPage.xaml line 271
                {
                    this.DescriptorsListView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.DescriptorsListView).ItemClick += this.DescriptorsListView_ItemClick;
                }
                break;
            case 26: // Views\CharacteristicPage.xaml line 260
                {
                    this.IndicateSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 28: // Views\CharacteristicPage.xaml line 264
                {
                    this.IndicateError = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 29: // Views\CharacteristicPage.xaml line 251
                {
                    this.NotifySwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 33: // Views\CharacteristicPage.xaml line 230
                {
                    this.WriteValueText = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 34: // Views\CharacteristicPage.xaml line 231
                {
                    this.WriteValue = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.WriteValue).TextChanging += this.WriteValue_TextChanging;
                }
                break;
            case 35: // Views\CharacteristicPage.xaml line 234
                {
                    this.WriteButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 36: // Views\CharacteristicPage.xaml line 237
                {
                    this.WriteType = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 37: // Views\CharacteristicPage.xaml line 238
                {
                    this.radioButton4 = (global::Windows.UI.Xaml.Controls.RadioButton)(target);
                }
                break;
            case 38: // Views\CharacteristicPage.xaml line 239
                {
                    this.radioButton5 = (global::Windows.UI.Xaml.Controls.RadioButton)(target);
                    ((global::Windows.UI.Xaml.Controls.RadioButton)this.radioButton5).Checked += this.radioButton5_Checked;
                    ((global::Windows.UI.Xaml.Controls.RadioButton)this.radioButton5).Unchecked += this.radioButton5_Unchecked;
                }
                break;
            case 39: // Views\CharacteristicPage.xaml line 240
                {
                    this.radioButton6 = (global::Windows.UI.Xaml.Controls.RadioButton)(target);
                }
                break;
            case 41: // Views\CharacteristicPage.xaml line 212
                {
                    this.ReadValueText = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 42: // Views\CharacteristicPage.xaml line 213
                {
                    this.Value = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 43: // Views\CharacteristicPage.xaml line 216
                {
                    this.ReadAgainButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 44: // Views\CharacteristicPage.xaml line 220
                {
                    this.DisplayType = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 45: // Views\CharacteristicPage.xaml line 221
                {
                    this.radioButton = (global::Windows.UI.Xaml.Controls.RadioButton)(target);
                }
                break;
            case 46: // Views\CharacteristicPage.xaml line 222
                {
                    this.radioButton1 = (global::Windows.UI.Xaml.Controls.RadioButton)(target);
                }
                break;
            case 47: // Views\CharacteristicPage.xaml line 223
                {
                    this.radioButton2 = (global::Windows.UI.Xaml.Controls.RadioButton)(target);
                }
                break;
            case 48: // Views\CharacteristicPage.xaml line 224
                {
                    this.radioButton3 = (global::Windows.UI.Xaml.Controls.RadioButton)(target);
                }
                break;
            case 50: // Views\CharacteristicPage.xaml line 208
                {
                    this.HandleValueText = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\CharacteristicPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    CharacteristicPage_obj1_Bindings bindings = new CharacteristicPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 16: // Views\CharacteristicPage.xaml line 279
                {                    
                    global::Windows.UI.Xaml.Controls.TextBlock element16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                    CharacteristicPage_obj16_Bindings bindings = new CharacteristicPage_obj16_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element16.DataContext);
                    element16.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element16, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element16, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

