#pragma checksum "C:\Users\tilt7\Documents\GitHub\BluetoothLEExplorer\BluetoothLEExplorer\BluetoothLEExplorer\Views\Services\MicrosoftServicePage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A315A1D06175B9C6739A3759B4CB28D0"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BluetoothLEExplorer.Views
{
    partial class MicrosoftServicePage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj, global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel), targetNullValue);
                }
                obj.Characteristic = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MicrosoftServicePage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMicrosoftServicePage_Bindings
        {
            private global::BluetoothLEExplorer.Views.MicrosoftServicePage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj12;
            private global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj13;
            private global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj14;
            private global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj15;
            private global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj18;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj19;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj20;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj21;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj19Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj20Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj21Click;

            private MicrosoftServicePage_obj1_BindingsTracking bindingsTracking;

            public MicrosoftServicePage_obj1_Bindings()
            {
                this.bindingsTracking = new MicrosoftServicePage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 12: // Views\Services\MicrosoftServicePage.xaml line 147
                        this.obj12 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)target;
                        break;
                    case 13: // Views\Services\MicrosoftServicePage.xaml line 149
                        this.obj13 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)target;
                        break;
                    case 14: // Views\Services\MicrosoftServicePage.xaml line 150
                        this.obj14 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)target;
                        break;
                    case 15: // Views\Services\MicrosoftServicePage.xaml line 151
                        this.obj15 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)target;
                        break;
                    case 16: // Views\Services\MicrosoftServicePage.xaml line 152
                        this.obj16 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)target;
                        break;
                    case 17: // Views\Services\MicrosoftServicePage.xaml line 137
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 18: // Views\Services\MicrosoftServicePage.xaml line 138
                        this.obj18 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    case 19: // Views\Services\MicrosoftServicePage.xaml line 129
                        this.obj19 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj19Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoSettings();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj19Click;
                        break;
                    case 20: // Views\Services\MicrosoftServicePage.xaml line 130
                        this.obj20 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj20Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoPrivacy();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj20Click;
                        break;
                    case 21: // Views\Services\MicrosoftServicePage.xaml line 131
                        this.obj21 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj21Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoAbout();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj21Click;
                        break;
                    default:
                        break;
                }
            }

            // IMicrosoftServicePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Views.MicrosoftServicePage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Views.MicrosoftServicePage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ReadCharacteristic(obj.ReadCharacteristic, phase);
                        this.Update_ViewModel_WriteCharacteristic(obj.WriteCharacteristic, phase);
                        this.Update_ViewModel_NotifyCharacteristic(obj.NotifyCharacteristic, phase);
                        this.Update_ViewModel_IndicateCharacteristic(obj.IndicateCharacteristic, phase);
                        this.Update_ViewModel_ReadLongCharacteristic(obj.ReadLongCharacteristic, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Service(obj.Service, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ServiceVM(obj.ServiceVM, phase);
                    }
                }
            }
            private void Update_ViewModel_ReadCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReadCharacteristic(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\MicrosoftServicePage.xaml line 147
                    XamlBindingSetters.Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(this.obj12, obj, null);
                }
            }
            private void Update_ViewModel_WriteCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_WriteCharacteristic(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\MicrosoftServicePage.xaml line 149
                    XamlBindingSetters.Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(this.obj13, obj, null);
                }
            }
            private void Update_ViewModel_NotifyCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_NotifyCharacteristic(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\MicrosoftServicePage.xaml line 150
                    XamlBindingSetters.Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(this.obj14, obj, null);
                }
            }
            private void Update_ViewModel_IndicateCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_IndicateCharacteristic(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\MicrosoftServicePage.xaml line 151
                    XamlBindingSetters.Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(this.obj15, obj, null);
                }
            }
            private void Update_ViewModel_ReadLongCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReadLongCharacteristic(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\MicrosoftServicePage.xaml line 152
                    XamlBindingSetters.Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(this.obj16, obj, null);
                }
            }
            private void Update_ViewModel_Service(global::GattServicesLibrary.Services.MicrosoftService obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Service_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_ViewModel_Service_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Services\MicrosoftServicePage.xaml line 137
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                }
            }
            private void Update_ViewModel_ServiceVM(global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ServiceVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ServiceVM_IsPublishing(obj.IsPublishing, phase);
                    }
                }
            }
            private void Update_ViewModel_ServiceVM_IsPublishing(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\MicrosoftServicePage.xaml line 138
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj18, obj);
                }
            }
            private void UpdateTwoWay_18_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.ServiceVM != null)
                            {
                                this.dataRoot.ViewModel.ServiceVM.IsPublishing = this.obj18.IsOn;
                            }
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MicrosoftServicePage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MicrosoftServicePage_obj1_Bindings> weakRefToBindingObj; 

                public MicrosoftServicePage_obj1_BindingsTracking(MicrosoftServicePage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MicrosoftServicePage_obj1_Bindings>(obj);
                }

                public MicrosoftServicePage_obj1_Bindings TryGetBindingObject()
                {
                    MicrosoftServicePage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_ReadCharacteristic(null);
                    UpdateChildListeners_ViewModel_WriteCharacteristic(null);
                    UpdateChildListeners_ViewModel_NotifyCharacteristic(null);
                    UpdateChildListeners_ViewModel_IndicateCharacteristic(null);
                    UpdateChildListeners_ViewModel_ReadLongCharacteristic(null);
                    UpdateChildListeners_ViewModel_ServiceVM(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MicrosoftServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_ReadCharacteristic(obj.ReadCharacteristic, DATA_CHANGED);
                                bindings.Update_ViewModel_WriteCharacteristic(obj.WriteCharacteristic, DATA_CHANGED);
                                bindings.Update_ViewModel_NotifyCharacteristic(obj.NotifyCharacteristic, DATA_CHANGED);
                                bindings.Update_ViewModel_IndicateCharacteristic(obj.IndicateCharacteristic, DATA_CHANGED);
                                bindings.Update_ViewModel_ReadLongCharacteristic(obj.ReadLongCharacteristic, DATA_CHANGED);
                                bindings.Update_ViewModel_ServiceVM(obj.ServiceVM, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ReadCharacteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReadCharacteristic(obj.ReadCharacteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "WriteCharacteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_WriteCharacteristic(obj.WriteCharacteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NotifyCharacteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NotifyCharacteristic(obj.NotifyCharacteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IndicateCharacteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IndicateCharacteristic(obj.IndicateCharacteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReadLongCharacteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReadLongCharacteristic(obj.ReadLongCharacteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ServiceVM":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ServiceVM(obj.ServiceVM, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReadCharacteristic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MicrosoftServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel cache_ViewModel_ReadCharacteristic = null;
                public void UpdateChildListeners_ViewModel_ReadCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj)
                {
                    if (obj != cache_ViewModel_ReadCharacteristic)
                    {
                        if (cache_ViewModel_ReadCharacteristic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReadCharacteristic).PropertyChanged -= PropertyChanged_ViewModel_ReadCharacteristic;
                            cache_ViewModel_ReadCharacteristic = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReadCharacteristic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReadCharacteristic;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_WriteCharacteristic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MicrosoftServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel cache_ViewModel_WriteCharacteristic = null;
                public void UpdateChildListeners_ViewModel_WriteCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj)
                {
                    if (obj != cache_ViewModel_WriteCharacteristic)
                    {
                        if (cache_ViewModel_WriteCharacteristic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_WriteCharacteristic).PropertyChanged -= PropertyChanged_ViewModel_WriteCharacteristic;
                            cache_ViewModel_WriteCharacteristic = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_WriteCharacteristic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_WriteCharacteristic;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_NotifyCharacteristic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MicrosoftServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel cache_ViewModel_NotifyCharacteristic = null;
                public void UpdateChildListeners_ViewModel_NotifyCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj)
                {
                    if (obj != cache_ViewModel_NotifyCharacteristic)
                    {
                        if (cache_ViewModel_NotifyCharacteristic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_NotifyCharacteristic).PropertyChanged -= PropertyChanged_ViewModel_NotifyCharacteristic;
                            cache_ViewModel_NotifyCharacteristic = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_NotifyCharacteristic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_NotifyCharacteristic;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_IndicateCharacteristic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MicrosoftServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel cache_ViewModel_IndicateCharacteristic = null;
                public void UpdateChildListeners_ViewModel_IndicateCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj)
                {
                    if (obj != cache_ViewModel_IndicateCharacteristic)
                    {
                        if (cache_ViewModel_IndicateCharacteristic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_IndicateCharacteristic).PropertyChanged -= PropertyChanged_ViewModel_IndicateCharacteristic;
                            cache_ViewModel_IndicateCharacteristic = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_IndicateCharacteristic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_IndicateCharacteristic;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReadLongCharacteristic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MicrosoftServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel cache_ViewModel_ReadLongCharacteristic = null;
                public void UpdateChildListeners_ViewModel_ReadLongCharacteristic(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj)
                {
                    if (obj != cache_ViewModel_ReadLongCharacteristic)
                    {
                        if (cache_ViewModel_ReadLongCharacteristic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReadLongCharacteristic).PropertyChanged -= PropertyChanged_ViewModel_ReadLongCharacteristic;
                            cache_ViewModel_ReadLongCharacteristic = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReadLongCharacteristic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReadLongCharacteristic;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ServiceVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MicrosoftServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_ServiceVM_IsPublishing(obj.IsPublishing, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsPublishing":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ServiceVM_IsPublishing(obj.IsPublishing, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel cache_ViewModel_ServiceVM = null;
                public void UpdateChildListeners_ViewModel_ServiceVM(global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel obj)
                {
                    if (obj != cache_ViewModel_ServiceVM)
                    {
                        if (cache_ViewModel_ServiceVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ServiceVM).PropertyChanged -= PropertyChanged_ViewModel_ServiceVM;
                            cache_ViewModel_ServiceVM = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ServiceVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ServiceVM;
                        }
                    }
                }
                public void RegisterTwoWayListener_18(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_IsOn();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\Services\MicrosoftServicePage.xaml line 1
                {
                    this.page = (global::Windows.UI.Xaml.Controls.Page)(target);
                }
                break;
            case 2: // Views\Services\MicrosoftServicePage.xaml line 17
                {
                    this.ViewModel = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)(target);
                }
                break;
            case 3: // Views\Services\MicrosoftServicePage.xaml line 23
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 4: // Views\Services\MicrosoftServicePage.xaml line 24
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5: // Views\Services\MicrosoftServicePage.xaml line 38
                {
                    this.VisualStateTileNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\Services\MicrosoftServicePage.xaml line 53
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 7: // Views\Services\MicrosoftServicePage.xaml line 67
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 8: // Views\Services\MicrosoftServicePage.xaml line 81
                {
                    this.VisualStatTileWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 9: // Views\Services\MicrosoftServicePage.xaml line 98
                {
                    this.VisualStateTileReallyWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 10: // Views\Services\MicrosoftServicePage.xaml line 123
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 11: // Views\Services\MicrosoftServicePage.xaml line 136
                {
                    this.SwitchHeader = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 12: // Views\Services\MicrosoftServicePage.xaml line 147
                {
                    this.c1 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)(target);
                }
                break;
            case 13: // Views\Services\MicrosoftServicePage.xaml line 149
                {
                    this.c2 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)(target);
                }
                break;
            case 14: // Views\Services\MicrosoftServicePage.xaml line 150
                {
                    this.c3 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)(target);
                }
                break;
            case 15: // Views\Services\MicrosoftServicePage.xaml line 151
                {
                    this.c4 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)(target);
                }
                break;
            case 16: // Views\Services\MicrosoftServicePage.xaml line 152
                {
                    this.c5 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)(target);
                }
                break;
            case 18: // Views\Services\MicrosoftServicePage.xaml line 138
                {
                    this.Switch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Services\MicrosoftServicePage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MicrosoftServicePage_obj1_Bindings bindings = new MicrosoftServicePage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

