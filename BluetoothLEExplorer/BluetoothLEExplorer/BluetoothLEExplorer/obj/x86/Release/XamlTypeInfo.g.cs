//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace BluetoothLEExplorer
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        private global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[145];
            _typeNameTable[0] = "Template10.Common.BootStrapper";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Template10.Common.StateItems";
            _typeNameTable[3] = "System.Collections.Generic.Dictionary`2<String, Object>";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Template10.Services.NavigationService.INavigationService";
            _typeNameTable[7] = "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>";
            _typeNameTable[8] = "System.MulticastDelegate";
            _typeNameTable[9] = "System.Delegate";
            _typeNameTable[10] = "TimeSpan";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Boolean";
            _typeNameTable[13] = "Windows.ApplicationModel.Activation.IActivatedEventArgs";
            _typeNameTable[14] = "Template10.Common.BootStrapper.States";
            _typeNameTable[15] = "System.Enum";
            _typeNameTable[16] = "Template10.Controls.ModalDialog";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[18] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[19] = "Windows.UI.Color";
            _typeNameTable[20] = "Byte";
            _typeNameTable[21] = "BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[23] = "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel";
            _typeNameTable[24] = "Template10.Mvvm.ViewModelBase";
            _typeNameTable[25] = "Template10.Mvvm.BindableBase";
            _typeNameTable[26] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[27] = "Template10.Controls.HamburgerMenu";
            _typeNameTable[28] = "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[29] = "System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[30] = "Template10.Controls.HamburgerButtonInfo";
            _typeNameTable[31] = "Template10.Mvvm.DependencyBindableBase";
            _typeNameTable[32] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[33] = "Template10.Controls.HamburgerButtonInfo.ButtonTypes";
            _typeNameTable[34] = "Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo";
            _typeNameTable[35] = "System.Windows.Input.ICommand";
            _typeNameTable[36] = "System.Type";
            _typeNameTable[37] = "System.Nullable`1<Boolean>";
            _typeNameTable[38] = "Double";
            _typeNameTable[39] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[40] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.SplitViewDisplayMode";
            _typeNameTable[42] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[43] = "Template10.Controls.HamburgerMenu.OpenCloseModes";
            _typeNameTable[44] = "Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[45] = "Template10.Controls.PageHeader";
            _typeNameTable[46] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[47] = "Template10.Behaviors.EllipsisBehavior.Visibilities";
            _typeNameTable[48] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[49] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[50] = "Template10.Controls.Resizer";
            _typeNameTable[51] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[52] = "Windows.Foundation.Size";
            _typeNameTable[53] = "BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel";
            _typeNameTable[54] = "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel";
            _typeNameTable[55] = "GattServicesLibrary.Services.AlertNotificationService";
            _typeNameTable[56] = "GattServicesLibrary.GenericGattService";
            _typeNameTable[57] = "Template10.Common.IDispatcherWrapper";
            _typeNameTable[58] = "Template10.Common.IStateItems";
            _typeNameTable[59] = "BluetoothLEExplorer.Views.AlertNotificationServicePage";
            _typeNameTable[60] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[61] = "BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel";
            _typeNameTable[62] = "GattServicesLibrary.Services.BloodPressureService";
            _typeNameTable[63] = "Template10.Converters.ValueWhenConverter";
            _typeNameTable[64] = "BluetoothLEExplorer.Views.BloodPressureServicePage";
            _typeNameTable[65] = "BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel";
            _typeNameTable[66] = "GattServicesLibrary.Services.CurrentTimeService";
            _typeNameTable[67] = "BluetoothLEExplorer.Views.CurrentTimeServicePage";
            _typeNameTable[68] = "BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel";
            _typeNameTable[69] = "GattServicesLibrary.Services.HeartRateService";
            _typeNameTable[70] = "BluetoothLEExplorer.Views.HeartRateServicePage";
            _typeNameTable[71] = "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel";
            _typeNameTable[72] = "GattServicesLibrary.Services.MicrosoftService";
            _typeNameTable[73] = "BluetoothLEExplorer.Views.MicrosoftServicePage";
            _typeNameTable[74] = "BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel";
            _typeNameTable[75] = "GattServicesLibrary.Services.BatteryService";
            _typeNameTable[76] = "BluetoothLEExplorer.Views.BatteryServicePage";
            _typeNameTable[77] = "BluetoothLEExplorer.ViewModels.BeaconViewModel";
            _typeNameTable[78] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[79] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[80] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[81] = "Template10.Behaviors.KeyBehavior";
            _typeNameTable[82] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[83] = "Windows.System.VirtualKey";
            _typeNameTable[84] = "Template10.Behaviors.KeyBehavior.Kinds";
            _typeNameTable[85] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[86] = "Microsoft.Xaml.Interactivity.Trigger";
            _typeNameTable[87] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[88] = "Template10.Behaviors.FocusAction";
            _typeNameTable[89] = "Microsoft.Xaml.Interactions.Core.CallMethodAction";
            _typeNameTable[90] = "BluetoothLEExplorer.Views.Beacon";
            _typeNameTable[91] = "BluetoothLEExplorer.Views.Busy";
            _typeNameTable[92] = "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel";
            _typeNameTable[93] = "System.Collections.ObjectModel.ObservableCollection`1<String>";
            _typeNameTable[94] = "System.Collections.ObjectModel.Collection`1<String>";
            _typeNameTable[95] = "BluetoothLEExplorer.Models.ObservableGattCharacteristics";
            _typeNameTable[96] = "BluetoothLEExplorer.Models.ObservableGattDescriptors";
            _typeNameTable[97] = "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes";
            _typeNameTable[98] = "BluetoothLEExplorer.Services.Converters.DisplayTypeToBooleanConverter";
            _typeNameTable[99] = "BluetoothLEExplorer.Services.Converters.WriteTypeToBooleanConverter";
            _typeNameTable[100] = "BluetoothLEExplorer.Views.CharacteristicPage";
            _typeNameTable[101] = "BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel";
            _typeNameTable[102] = "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice";
            _typeNameTable[103] = "BluetoothLEExplorer.Views.BackgroundColorConverter";
            _typeNameTable[104] = "BluetoothLEExplorer.Views.DeviceServicesPage";
            _typeNameTable[105] = "BluetoothLEExplorer.ViewModels.DiscoverViewModel";
            _typeNameTable[106] = "BluetoothLEExplorer.Models.GattSampleContext";
            _typeNameTable[107] = "SortedObservableCollection.SortedObservableCollection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>";
            _typeNameTable[108] = "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>";
            _typeNameTable[109] = "System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>";
            _typeNameTable[110] = "Windows.Devices.Bluetooth.BluetoothLEDevice";
            _typeNameTable[111] = "Windows.UI.Xaml.Media.Imaging.BitmapImage";
            _typeNameTable[112] = "Windows.Devices.Enumeration.DeviceInformation";
            _typeNameTable[113] = "System.DateTime";
            _typeNameTable[114] = "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattDeviceService>";
            _typeNameTable[115] = "System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattDeviceService>";
            _typeNameTable[116] = "BluetoothLEExplorer.Models.ObservableGattDeviceService";
            _typeNameTable[117] = "Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService";
            _typeNameTable[118] = "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattCharacteristics>";
            _typeNameTable[119] = "System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattCharacteristics>";
            _typeNameTable[120] = "Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic";
            _typeNameTable[121] = "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattDescriptors>";
            _typeNameTable[122] = "System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattDescriptors>";
            _typeNameTable[123] = "Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor";
            _typeNameTable[124] = "BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes";
            _typeNameTable[125] = "Int32";
            _typeNameTable[126] = "UInt64";
            _typeNameTable[127] = "BluetoothLEExplorer.Views.Discover";
            _typeNameTable[128] = "BluetoothLEExplorer.ViewModels.SettingsPageViewModel";
            _typeNameTable[129] = "BluetoothLEExplorer.ViewModels.SettingsPartViewModel";
            _typeNameTable[130] = "BluetoothLEExplorer.ViewModels.AboutPartViewModel";
            _typeNameTable[131] = "BluetoothLEExplorer.Views.SettingsPage";
            _typeNameTable[132] = "BluetoothLEExplorer.ViewModels.ShellViewModel";
            _typeNameTable[133] = "BluetoothLEExplorer.Services.Converters.ShellFontConverter";
            _typeNameTable[134] = "BluetoothLEExplorer.Views.Shell";
            _typeNameTable[135] = "BluetoothLEExplorer.Views.Splash";
            _typeNameTable[136] = "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel";
            _typeNameTable[137] = "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattClient>";
            _typeNameTable[138] = "System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattClient>";
            _typeNameTable[139] = "BluetoothLEExplorer.Models.ObservableGattClient";
            _typeNameTable[140] = "BluetoothLEExplorer.Views.VirtualKeyboardPage";
            _typeNameTable[141] = "BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel";
            _typeNameTable[142] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[143] = "BluetoothLEExplorer.Views.VirtualPeripheralPage";
            _typeNameTable[144] = "BluetoothLEExplorer.App";

            _typeTable = new global::System.Type[145];
            _typeTable[0] = typeof(global::Template10.Common.BootStrapper);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Template10.Common.StateItems);
            _typeTable[3] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Template10.Services.NavigationService.INavigationService);
            _typeTable[7] = typeof(global::System.Func<global::Windows.ApplicationModel.Activation.SplashScreen, global::Windows.UI.Xaml.Controls.UserControl>);
            _typeTable[8] = typeof(global::System.MulticastDelegate);
            _typeTable[9] = typeof(global::System.Delegate);
            _typeTable[10] = typeof(global::System.TimeSpan);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Boolean);
            _typeTable[13] = typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs);
            _typeTable[14] = typeof(global::Template10.Common.BootStrapper.States);
            _typeTable[15] = typeof(global::System.Enum);
            _typeTable[16] = typeof(global::Template10.Controls.ModalDialog);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[19] = typeof(global::Windows.UI.Color);
            _typeTable[20] = typeof(global::System.Byte);
            _typeTable[21] = typeof(global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[23] = typeof(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel);
            _typeTable[24] = typeof(global::Template10.Mvvm.ViewModelBase);
            _typeTable[25] = typeof(global::Template10.Mvvm.BindableBase);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[27] = typeof(global::Template10.Controls.HamburgerMenu);
            _typeTable[28] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[29] = typeof(global::System.Collections.ObjectModel.Collection<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[30] = typeof(global::Template10.Controls.HamburgerButtonInfo);
            _typeTable[31] = typeof(global::Template10.Mvvm.DependencyBindableBase);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[33] = typeof(global::Template10.Controls.HamburgerButtonInfo.ButtonTypes);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo);
            _typeTable[35] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[36] = typeof(global::System.Type);
            _typeTable[37] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[38] = typeof(global::System.Double);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[40] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.SplitViewDisplayMode);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[43] = typeof(global::Template10.Controls.HamburgerMenu.OpenCloseModes);
            _typeTable[44] = typeof(global::Template10.Mvvm.DelegateCommand<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[45] = typeof(global::Template10.Controls.PageHeader);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[47] = typeof(global::Template10.Behaviors.EllipsisBehavior.Visibilities);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[49] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[50] = typeof(global::Template10.Controls.Resizer);
            _typeTable[51] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[52] = typeof(global::Windows.Foundation.Size);
            _typeTable[53] = typeof(global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel);
            _typeTable[54] = typeof(global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel);
            _typeTable[55] = typeof(global::GattServicesLibrary.Services.AlertNotificationService);
            _typeTable[56] = typeof(global::GattServicesLibrary.GenericGattService);
            _typeTable[57] = typeof(global::Template10.Common.IDispatcherWrapper);
            _typeTable[58] = typeof(global::Template10.Common.IStateItems);
            _typeTable[59] = typeof(global::BluetoothLEExplorer.Views.AlertNotificationServicePage);
            _typeTable[60] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[61] = typeof(global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel);
            _typeTable[62] = typeof(global::GattServicesLibrary.Services.BloodPressureService);
            _typeTable[63] = typeof(global::Template10.Converters.ValueWhenConverter);
            _typeTable[64] = typeof(global::BluetoothLEExplorer.Views.BloodPressureServicePage);
            _typeTable[65] = typeof(global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel);
            _typeTable[66] = typeof(global::GattServicesLibrary.Services.CurrentTimeService);
            _typeTable[67] = typeof(global::BluetoothLEExplorer.Views.CurrentTimeServicePage);
            _typeTable[68] = typeof(global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel);
            _typeTable[69] = typeof(global::GattServicesLibrary.Services.HeartRateService);
            _typeTable[70] = typeof(global::BluetoothLEExplorer.Views.HeartRateServicePage);
            _typeTable[71] = typeof(global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel);
            _typeTable[72] = typeof(global::GattServicesLibrary.Services.MicrosoftService);
            _typeTable[73] = typeof(global::BluetoothLEExplorer.Views.MicrosoftServicePage);
            _typeTable[74] = typeof(global::BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel);
            _typeTable[75] = typeof(global::GattServicesLibrary.Services.BatteryService);
            _typeTable[76] = typeof(global::BluetoothLEExplorer.Views.BatteryServicePage);
            _typeTable[77] = typeof(global::BluetoothLEExplorer.ViewModels.BeaconViewModel);
            _typeTable[78] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[79] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[80] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[81] = typeof(global::Template10.Behaviors.KeyBehavior);
            _typeTable[82] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[83] = typeof(global::Windows.System.VirtualKey);
            _typeTable[84] = typeof(global::Template10.Behaviors.KeyBehavior.Kinds);
            _typeTable[85] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[86] = typeof(global::Microsoft.Xaml.Interactivity.Trigger);
            _typeTable[87] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[88] = typeof(global::Template10.Behaviors.FocusAction);
            _typeTable[89] = typeof(global::Microsoft.Xaml.Interactions.Core.CallMethodAction);
            _typeTable[90] = typeof(global::BluetoothLEExplorer.Views.Beacon);
            _typeTable[91] = typeof(global::BluetoothLEExplorer.Views.Busy);
            _typeTable[92] = typeof(global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel);
            _typeTable[93] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.String>);
            _typeTable[94] = typeof(global::System.Collections.ObjectModel.Collection<global::System.String>);
            _typeTable[95] = typeof(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics);
            _typeTable[96] = typeof(global::BluetoothLEExplorer.Models.ObservableGattDescriptors);
            _typeTable[97] = typeof(global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes);
            _typeTable[98] = typeof(global::BluetoothLEExplorer.Services.Converters.DisplayTypeToBooleanConverter);
            _typeTable[99] = typeof(global::BluetoothLEExplorer.Services.Converters.WriteTypeToBooleanConverter);
            _typeTable[100] = typeof(global::BluetoothLEExplorer.Views.CharacteristicPage);
            _typeTable[101] = typeof(global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel);
            _typeTable[102] = typeof(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice);
            _typeTable[103] = typeof(global::BluetoothLEExplorer.Views.BackgroundColorConverter);
            _typeTable[104] = typeof(global::BluetoothLEExplorer.Views.DeviceServicesPage);
            _typeTable[105] = typeof(global::BluetoothLEExplorer.ViewModels.DiscoverViewModel);
            _typeTable[106] = typeof(global::BluetoothLEExplorer.Models.GattSampleContext);
            _typeTable[107] = typeof(global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>);
            _typeTable[108] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>);
            _typeTable[109] = typeof(global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>);
            _typeTable[110] = typeof(global::Windows.Devices.Bluetooth.BluetoothLEDevice);
            _typeTable[111] = typeof(global::Windows.UI.Xaml.Media.Imaging.BitmapImage);
            _typeTable[112] = typeof(global::Windows.Devices.Enumeration.DeviceInformation);
            _typeTable[113] = typeof(global::System.DateTime);
            _typeTable[114] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>);
            _typeTable[115] = typeof(global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>);
            _typeTable[116] = typeof(global::BluetoothLEExplorer.Models.ObservableGattDeviceService);
            _typeTable[117] = typeof(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService);
            _typeTable[118] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics>);
            _typeTable[119] = typeof(global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics>);
            _typeTable[120] = typeof(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic);
            _typeTable[121] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors>);
            _typeTable[122] = typeof(global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors>);
            _typeTable[123] = typeof(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor);
            _typeTable[124] = typeof(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes);
            _typeTable[125] = typeof(global::System.Int32);
            _typeTable[126] = typeof(global::System.UInt64);
            _typeTable[127] = typeof(global::BluetoothLEExplorer.Views.Discover);
            _typeTable[128] = typeof(global::BluetoothLEExplorer.ViewModels.SettingsPageViewModel);
            _typeTable[129] = typeof(global::BluetoothLEExplorer.ViewModels.SettingsPartViewModel);
            _typeTable[130] = typeof(global::BluetoothLEExplorer.ViewModels.AboutPartViewModel);
            _typeTable[131] = typeof(global::BluetoothLEExplorer.Views.SettingsPage);
            _typeTable[132] = typeof(global::BluetoothLEExplorer.ViewModels.ShellViewModel);
            _typeTable[133] = typeof(global::BluetoothLEExplorer.Services.Converters.ShellFontConverter);
            _typeTable[134] = typeof(global::BluetoothLEExplorer.Views.Shell);
            _typeTable[135] = typeof(global::BluetoothLEExplorer.Views.Splash);
            _typeTable[136] = typeof(global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel);
            _typeTable[137] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattClient>);
            _typeTable[138] = typeof(global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattClient>);
            _typeTable[139] = typeof(global::BluetoothLEExplorer.Models.ObservableGattClient);
            _typeTable[140] = typeof(global::BluetoothLEExplorer.Views.VirtualKeyboardPage);
            _typeTable[141] = typeof(global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel);
            _typeTable[142] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[143] = typeof(global::BluetoothLEExplorer.Views.VirtualPeripheralPage);
            _typeTable[144] = typeof(global::BluetoothLEExplorer.App);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_2_StateItems() { return new global::Template10.Common.StateItems(); }
        private object Activate_3_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>(); }
        private object Activate_16_ModalDialog() { return new global::Template10.Controls.ModalDialog(); }
        private object Activate_21_GattLocalCharacteristicControl() { return new global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl(); }
        private object Activate_27_HamburgerMenu() { return new global::Template10.Controls.HamburgerMenu(); }
        private object Activate_28_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>(); }
        private object Activate_29_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Template10.Controls.HamburgerButtonInfo>(); }
        private object Activate_30_HamburgerButtonInfo() { return new global::Template10.Controls.HamburgerButtonInfo(); }
        private object Activate_45_PageHeader() { return new global::Template10.Controls.PageHeader(); }
        private object Activate_50_Resizer() { return new global::Template10.Controls.Resizer(); }
        private object Activate_53_AlertNotificationServicePageViewModel() { return new global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel(); }
        private object Activate_55_AlertNotificationService() { return new global::GattServicesLibrary.Services.AlertNotificationService(); }
        private object Activate_59_AlertNotificationServicePage() { return new global::BluetoothLEExplorer.Views.AlertNotificationServicePage(); }
        private object Activate_61_BloodPressureServicePageViewModel() { return new global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel(); }
        private object Activate_62_BloodPressureService() { return new global::GattServicesLibrary.Services.BloodPressureService(); }
        private object Activate_63_ValueWhenConverter() { return new global::Template10.Converters.ValueWhenConverter(); }
        private object Activate_64_BloodPressureServicePage() { return new global::BluetoothLEExplorer.Views.BloodPressureServicePage(); }
        private object Activate_65_CurrentTimeServicePageViewModel() { return new global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel(); }
        private object Activate_66_CurrentTimeService() { return new global::GattServicesLibrary.Services.CurrentTimeService(); }
        private object Activate_67_CurrentTimeServicePage() { return new global::BluetoothLEExplorer.Views.CurrentTimeServicePage(); }
        private object Activate_68_HeartRateServicePageViewModel() { return new global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel(); }
        private object Activate_69_HeartRateService() { return new global::GattServicesLibrary.Services.HeartRateService(); }
        private object Activate_70_HeartRateServicePage() { return new global::BluetoothLEExplorer.Views.HeartRateServicePage(); }
        private object Activate_71_MicrosoftServicePageViewModel() { return new global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel(); }
        private object Activate_72_MicrosoftService() { return new global::GattServicesLibrary.Services.MicrosoftService(); }
        private object Activate_73_MicrosoftServicePage() { return new global::BluetoothLEExplorer.Views.MicrosoftServicePage(); }
        private object Activate_74_BatteryServicePageViewModel() { return new global::BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel(); }
        private object Activate_75_BatteryService() { return new global::GattServicesLibrary.Services.BatteryService(); }
        private object Activate_76_BatteryServicePage() { return new global::BluetoothLEExplorer.Views.BatteryServicePage(); }
        private object Activate_77_BeaconViewModel() { return new global::BluetoothLEExplorer.ViewModels.BeaconViewModel(); }
        private object Activate_79_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_81_KeyBehavior() { return new global::Template10.Behaviors.KeyBehavior(); }
        private object Activate_82_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_85_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_88_FocusAction() { return new global::Template10.Behaviors.FocusAction(); }
        private object Activate_89_CallMethodAction() { return new global::Microsoft.Xaml.Interactions.Core.CallMethodAction(); }
        private object Activate_90_Beacon() { return new global::BluetoothLEExplorer.Views.Beacon(); }
        private object Activate_91_Busy() { return new global::BluetoothLEExplorer.Views.Busy(); }
        private object Activate_92_CharacteristicPageViewModel() { return new global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel(); }
        private object Activate_93_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.String>(); }
        private object Activate_94_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.String>(); }
        private object Activate_98_DisplayTypeToBooleanConverter() { return new global::BluetoothLEExplorer.Services.Converters.DisplayTypeToBooleanConverter(); }
        private object Activate_99_WriteTypeToBooleanConverter() { return new global::BluetoothLEExplorer.Services.Converters.WriteTypeToBooleanConverter(); }
        private object Activate_100_CharacteristicPage() { return new global::BluetoothLEExplorer.Views.CharacteristicPage(); }
        private object Activate_101_DeviceServicesPageViewModel() { return new global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel(); }
        private object Activate_103_BackgroundColorConverter() { return new global::BluetoothLEExplorer.Views.BackgroundColorConverter(); }
        private object Activate_104_DeviceServicesPage() { return new global::BluetoothLEExplorer.Views.DeviceServicesPage(); }
        private object Activate_105_DiscoverViewModel() { return new global::BluetoothLEExplorer.ViewModels.DiscoverViewModel(); }
        private object Activate_107_SortedObservableCollection() { return new global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>(); }
        private object Activate_108_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>(); }
        private object Activate_109_Collection() { return new global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>(); }
        private object Activate_114_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>(); }
        private object Activate_115_Collection() { return new global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>(); }
        private object Activate_118_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics>(); }
        private object Activate_119_Collection() { return new global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics>(); }
        private object Activate_121_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors>(); }
        private object Activate_122_Collection() { return new global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors>(); }
        private object Activate_127_Discover() { return new global::BluetoothLEExplorer.Views.Discover(); }
        private object Activate_128_SettingsPageViewModel() { return new global::BluetoothLEExplorer.ViewModels.SettingsPageViewModel(); }
        private object Activate_129_SettingsPartViewModel() { return new global::BluetoothLEExplorer.ViewModels.SettingsPartViewModel(); }
        private object Activate_130_AboutPartViewModel() { return new global::BluetoothLEExplorer.ViewModels.AboutPartViewModel(); }
        private object Activate_131_SettingsPage() { return new global::BluetoothLEExplorer.Views.SettingsPage(); }
        private object Activate_132_ShellViewModel() { return new global::BluetoothLEExplorer.ViewModels.ShellViewModel(); }
        private object Activate_133_ShellFontConverter() { return new global::BluetoothLEExplorer.Services.Converters.ShellFontConverter(); }
        private object Activate_134_Shell() { return new global::BluetoothLEExplorer.Views.Shell(); }
        private object Activate_136_VirtualKeyboardPageViewModel() { return new global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel(); }
        private object Activate_137_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattClient>(); }
        private object Activate_138_Collection() { return new global::System.Collections.ObjectModel.Collection<global::BluetoothLEExplorer.Models.ObservableGattClient>(); }
        private object Activate_140_VirtualKeyboardPage() { return new global::BluetoothLEExplorer.Views.VirtualKeyboardPage(); }
        private object Activate_141_VirtualPeripheralPageViewModel() { return new global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel(); }
        private object Activate_142_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_143_VirtualPeripheralPage() { return new global::BluetoothLEExplorer.Views.VirtualPeripheralPage(); }
        private object Activate_144_App() { return new global::BluetoothLEExplorer.App(); }
        private void MapAdd_2_StateItems(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_3_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_28_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Template10.Controls.HamburgerButtonInfo>)instance;
            var newItem = (global::Template10.Controls.HamburgerButtonInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Template10.Controls.HamburgerButtonInfo>)instance;
            var newItem = (global::Template10.Controls.HamburgerButtonInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_79_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_82_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_93_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_94_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_107_SortedObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)item;
            collection.Add(newItem);
        }
        private void VectorAdd_108_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)item;
            collection.Add(newItem);
        }
        private void VectorAdd_109_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)item;
            collection.Add(newItem);
        }
        private void VectorAdd_114_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)item;
            collection.Add(newItem);
        }
        private void VectorAdd_115_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)item;
            collection.Add(newItem);
        }
        private void VectorAdd_118_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)item;
            collection.Add(newItem);
        }
        private void VectorAdd_119_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)item;
            collection.Add(newItem);
        }
        private void VectorAdd_121_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)item;
            collection.Add(newItem);
        }
        private void VectorAdd_122_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)item;
            collection.Add(newItem);
        }
        private void VectorAdd_137_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattClient>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattClient)item;
            collection.Add(newItem);
        }
        private void VectorAdd_138_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BluetoothLEExplorer.Models.ObservableGattClient>)instance;
            var newItem = (global::BluetoothLEExplorer.Models.ObservableGattClient)item;
            collection.Add(newItem);
        }
        private void VectorAdd_142_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Template10.Common.BootStrapper
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                userType.AddMemberName("SessionState");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("SplashFactory");
                userType.AddMemberName("CacheMaxDuration");
                userType.AddMemberName("ShowShellBackButton");
                userType.AddMemberName("ForceShowShellBackButton");
                userType.AddMemberName("OriginalActivatedArgs");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("EnableAutoRestoreAfterTerminated");
                userType.AddMemberName("AutoRestoreAfterTerminated");
                userType.AddMemberName("AutoExtendExecutionSession");
                userType.AddMemberName("AutoSuspendAllFrames");
                userType.AddMemberName("ModalDialog");
                userType.AddMemberName("ModalContent");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Template10.Common.StateItems
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.Dictionary`2<String, Object>"));
                userType.DictionaryAdd = MapAdd_2_StateItems;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Collections.Generic.Dictionary`2<String, Object>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_Dictionary;
                userType.DictionaryAdd = MapAdd_3_Dictionary;
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Template10.Services.NavigationService.INavigationService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.MulticastDelegate
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 9:   //  System.Delegate
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  TimeSpan
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Boolean
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.ApplicationModel.Activation.IActivatedEventArgs
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Template10.Common.BootStrapper.States
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Common.BootStrapper.States.None);
                userType.AddEnumValue("Running", global::Template10.Common.BootStrapper.States.Running);
                userType.AddEnumValue("BeforeInit", global::Template10.Common.BootStrapper.States.BeforeInit);
                userType.AddEnumValue("AfterInit", global::Template10.Common.BootStrapper.States.AfterInit);
                userType.AddEnumValue("BeforeLaunch", global::Template10.Common.BootStrapper.States.BeforeLaunch);
                userType.AddEnumValue("AfterLaunch", global::Template10.Common.BootStrapper.States.AfterLaunch);
                userType.AddEnumValue("BeforeActivate", global::Template10.Common.BootStrapper.States.BeforeActivate);
                userType.AddEnumValue("AfterActivate", global::Template10.Common.BootStrapper.States.AfterActivate);
                userType.AddEnumValue("BeforeStart", global::Template10.Common.BootStrapper.States.BeforeStart);
                userType.AddEnumValue("AfterStart", global::Template10.Common.BootStrapper.States.AfterStart);
                xamlType = userType;
                break;

            case 15:   //  System.Enum
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 16:   //  Template10.Controls.ModalDialog
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Color
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 20:   //  Byte
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_GattLocalCharacteristicControl;
                userType.AddMemberName("Value");
                userType.AddMemberName("Characteristic");
                userType.AddMemberName("ShowValue");
                userType.AddMemberName("IsReadOnly");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Template10.Mvvm.ViewModelBase
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("Dispatcher");
                userType.AddMemberName("SessionState");
                xamlType = userType;
                break;

            case 25:   //  Template10.Mvvm.BindableBase
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Template10.Controls.HamburgerMenu
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_27_HamburgerMenu;
                userType.SetContentPropertyName("Template10.Controls.HamburgerMenu.PrimaryButtons");
                userType.AddMemberName("PrimaryButtons");
                userType.AddMemberName("PaneBorderThickness");
                userType.AddMemberName("SecondarySeparator");
                userType.AddMemberName("NavButtonBackground");
                userType.AddMemberName("NavButtonForeground");
                userType.AddMemberName("NavAreaBackground");
                userType.AddMemberName("HamburgerForeground");
                userType.AddMemberName("HamburgerBackground");
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("VisualStateWideMinWidth");
                userType.AddMemberName("AccentColor");
                userType.AddMemberName("PaneBorderBrush");
                userType.AddMemberName("NavButtonCheckedForeground");
                userType.AddMemberName("NavButtonCheckedBackground");
                userType.AddMemberName("NavButtonCheckedIndicatorBrush");
                userType.AddMemberName("NavButtonPressedForeground");
                userType.AddMemberName("NavButtonPressedBackground");
                userType.AddMemberName("NavButtonHoverForeground");
                userType.AddMemberName("NavButtonHoverBackground");
                userType.AddMemberName("HamburgerButtonVisibility");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("VisualStateNarrowDisplayMode");
                userType.AddMemberName("VisualStateNormalDisplayMode");
                userType.AddMemberName("VisualStateWideDisplayMode");
                userType.AddMemberName("SecondaryButtonOrientation");
                userType.AddMemberName("Selected");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("IsFullScreen");
                userType.AddMemberName("PaneWidth");
                userType.AddMemberName("HamburgerButtonGridWidth");
                userType.AddMemberName("OpenCloseMode");
                userType.AddMemberName("HeaderContent");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("SecondaryButtons");
                userType.AddMemberName("NavCommand");
                userType.AddMemberName("PropertyChangedHandlers");
                xamlType = userType;
                break;

            case 28:   //  System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>"));
                userType.CollectionAdd = VectorAdd_28_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_Collection;
                userType.CollectionAdd = VectorAdd_29_Collection;
                xamlType = userType;
                break;

            case 30:   //  Template10.Controls.HamburgerButtonInfo
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.DependencyBindableBase"));
                userType.Activator = Activate_30_HamburgerButtonInfo;
                userType.SetContentPropertyName("Template10.Controls.HamburgerButtonInfo.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("ButtonType");
                userType.AddMemberName("NavigationTransitionInfo");
                userType.AddMemberName("Command");
                userType.AddMemberName("ToolTip");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("GroupName");
                userType.AddMemberName("PageType");
                userType.AddMemberName("PageParameter");
                userType.AddMemberName("ClearHistory");
                userType.AddMemberName("ClearCache");
                userType.AddMemberName("Visibility");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("IsChecked");
                userType.AddMemberName("MaxWidth");
                xamlType = userType;
                break;

            case 31:   //  Template10.Mvvm.DependencyBindableBase
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Template10.Controls.HamburgerButtonInfo.ButtonTypes
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Toggle", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Toggle);
                userType.AddEnumValue("Command", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Command);
                userType.AddEnumValue("Literal", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Literal);
                xamlType = userType;
                break;

            case 34:   //  Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  System.Windows.Input.ICommand
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  System.Type
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  System.Nullable`1<Boolean>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Boolean"));
                userType.BoxInstance = userType.BoxType<global::System.Boolean>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  Double
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 39:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  Windows.UI.Xaml.Controls.SplitViewDisplayMode
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Template10.Controls.HamburgerMenu.OpenCloseModes
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Controls.HamburgerMenu.OpenCloseModes.None);
                userType.AddEnumValue("Auto", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Auto);
                userType.AddEnumValue("Tap", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Tap);
                userType.AddEnumValue("Swipe", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Swipe);
                xamlType = userType;
                break;

            case 44:   //  Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  Template10.Controls.PageHeader
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_45_PageHeader;
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("EllipsisVisibility");
                userType.AddMemberName("PrimaryCommandsVisibility");
                userType.AddMemberName("BackButtonVisibility");
                userType.AddMemberName("BackButtonContent");
                userType.AddMemberName("Frame");
                userType.AddMemberName("EnableHamburgerMenuAutoLayout");
                userType.AddMemberName("Text");
                xamlType = userType;
                break;

            case 46:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Template10.Behaviors.EllipsisBehavior.Visibilities
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Visible);
                userType.AddEnumValue("Collapsed", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Collapsed);
                userType.AddEnumValue("Auto", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Auto);
                xamlType = userType;
                break;

            case 48:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Template10.Controls.Resizer
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_50_Resizer;
                userType.SetContentPropertyName("Template10.Controls.Resizer.ElementControl");
                userType.AddMemberName("ElementControl");
                userType.AddMemberName("GrabberBrush");
                userType.AddMemberName("GrabberVisibility");
                userType.AddMemberName("GrabberSize");
                xamlType = userType;
                break;

            case 51:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  Windows.Foundation.Size
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_53_AlertNotificationServicePageViewModel;
                userType.AddMemberName("ServiceVM");
                userType.AddMemberName("Service");
                userType.AddMemberName("NewAlert");
                userType.AddMemberName("UnreadAlertStatus");
                userType.AddMemberName("AlertNotificationControlPoint");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  GattServicesLibrary.Services.AlertNotificationService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GattServicesLibrary.GenericGattService"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  GattServicesLibrary.GenericGattService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 57:   //  Template10.Common.IDispatcherWrapper
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 58:   //  Template10.Common.IStateItems
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  BluetoothLEExplorer.Views.AlertNotificationServicePage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_59_AlertNotificationServicePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 61:   //  BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_61_BloodPressureServicePageViewModel;
                userType.AddMemberName("ServiceVM");
                userType.AddMemberName("Service");
                userType.AddMemberName("BloodPressureMeasurement");
                userType.AddMemberName("BloodPressureFeature");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 62:   //  GattServicesLibrary.Services.BloodPressureService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GattServicesLibrary.GenericGattService"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  Template10.Converters.ValueWhenConverter
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_63_ValueWhenConverter;
                userType.AddMemberName("When");
                userType.AddMemberName("Value");
                userType.AddMemberName("Otherwise");
                userType.AddMemberName("OtherwiseValueBack");
                userType.AddMemberName("Debug");
                xamlType = userType;
                break;

            case 64:   //  BluetoothLEExplorer.Views.BloodPressureServicePage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_64_BloodPressureServicePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_65_CurrentTimeServicePageViewModel;
                userType.AddMemberName("ServiceVM");
                userType.AddMemberName("Service");
                userType.AddMemberName("CurrentTime");
                userType.AddMemberName("UnreadAlertStatus");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  GattServicesLibrary.Services.CurrentTimeService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GattServicesLibrary.GenericGattService"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 67:   //  BluetoothLEExplorer.Views.CurrentTimeServicePage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_67_CurrentTimeServicePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 68:   //  BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_68_HeartRateServicePageViewModel;
                userType.AddMemberName("ServiceVM");
                userType.AddMemberName("Service");
                userType.AddMemberName("HeartRateMeasurement");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 69:   //  GattServicesLibrary.Services.HeartRateService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GattServicesLibrary.GenericGattService"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 70:   //  BluetoothLEExplorer.Views.HeartRateServicePage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_70_HeartRateServicePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 71:   //  BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_71_MicrosoftServicePageViewModel;
                userType.AddMemberName("ServiceVM");
                userType.AddMemberName("Service");
                userType.AddMemberName("ReadCharacteristic");
                userType.AddMemberName("WriteCharacteristic");
                userType.AddMemberName("NotifyCharacteristic");
                userType.AddMemberName("IndicateCharacteristic");
                userType.AddMemberName("ReadLongCharacteristic");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 72:   //  GattServicesLibrary.Services.MicrosoftService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GattServicesLibrary.GenericGattService"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 73:   //  BluetoothLEExplorer.Views.MicrosoftServicePage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_73_MicrosoftServicePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_74_BatteryServicePageViewModel;
                userType.AddMemberName("ServiceVM");
                userType.AddMemberName("Service");
                userType.AddMemberName("BatteryLevel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  GattServicesLibrary.Services.BatteryService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GattServicesLibrary.GenericGattService"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 76:   //  BluetoothLEExplorer.Views.BatteryServicePage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_76_BatteryServicePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 77:   //  BluetoothLEExplorer.ViewModels.BeaconViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_77_BeaconViewModel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 78:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 79:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_79_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 80:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  Template10.Behaviors.KeyBehavior
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_81_KeyBehavior;
                userType.SetContentPropertyName("Template10.Behaviors.KeyBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("Key");
                userType.AddMemberName("AssociatedObject");
                userType.AddMemberName("AndControl");
                userType.AddMemberName("AndAlt");
                userType.AddMemberName("AndShift");
                userType.AddMemberName("Event");
                xamlType = userType;
                break;

            case 82:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_82_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 83:   //  Windows.System.VirtualKey
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Windows.System.VirtualKey.None);
                userType.AddEnumValue("LeftButton", global::Windows.System.VirtualKey.LeftButton);
                userType.AddEnumValue("RightButton", global::Windows.System.VirtualKey.RightButton);
                userType.AddEnumValue("Cancel", global::Windows.System.VirtualKey.Cancel);
                userType.AddEnumValue("MiddleButton", global::Windows.System.VirtualKey.MiddleButton);
                userType.AddEnumValue("XButton1", global::Windows.System.VirtualKey.XButton1);
                userType.AddEnumValue("XButton2", global::Windows.System.VirtualKey.XButton2);
                userType.AddEnumValue("Back", global::Windows.System.VirtualKey.Back);
                userType.AddEnumValue("Tab", global::Windows.System.VirtualKey.Tab);
                userType.AddEnumValue("Clear", global::Windows.System.VirtualKey.Clear);
                userType.AddEnumValue("Enter", global::Windows.System.VirtualKey.Enter);
                userType.AddEnumValue("Shift", global::Windows.System.VirtualKey.Shift);
                userType.AddEnumValue("Control", global::Windows.System.VirtualKey.Control);
                userType.AddEnumValue("Menu", global::Windows.System.VirtualKey.Menu);
                userType.AddEnumValue("Pause", global::Windows.System.VirtualKey.Pause);
                userType.AddEnumValue("CapitalLock", global::Windows.System.VirtualKey.CapitalLock);
                userType.AddEnumValue("Kana", global::Windows.System.VirtualKey.Kana);
                userType.AddEnumValue("Hangul", global::Windows.System.VirtualKey.Hangul);
                userType.AddEnumValue("Junja", global::Windows.System.VirtualKey.Junja);
                userType.AddEnumValue("Final", global::Windows.System.VirtualKey.Final);
                userType.AddEnumValue("Hanja", global::Windows.System.VirtualKey.Hanja);
                userType.AddEnumValue("Kanji", global::Windows.System.VirtualKey.Kanji);
                userType.AddEnumValue("Escape", global::Windows.System.VirtualKey.Escape);
                userType.AddEnumValue("Convert", global::Windows.System.VirtualKey.Convert);
                userType.AddEnumValue("NonConvert", global::Windows.System.VirtualKey.NonConvert);
                userType.AddEnumValue("Accept", global::Windows.System.VirtualKey.Accept);
                userType.AddEnumValue("ModeChange", global::Windows.System.VirtualKey.ModeChange);
                userType.AddEnumValue("Space", global::Windows.System.VirtualKey.Space);
                userType.AddEnumValue("PageUp", global::Windows.System.VirtualKey.PageUp);
                userType.AddEnumValue("PageDown", global::Windows.System.VirtualKey.PageDown);
                userType.AddEnumValue("End", global::Windows.System.VirtualKey.End);
                userType.AddEnumValue("Home", global::Windows.System.VirtualKey.Home);
                userType.AddEnumValue("Left", global::Windows.System.VirtualKey.Left);
                userType.AddEnumValue("Up", global::Windows.System.VirtualKey.Up);
                userType.AddEnumValue("Right", global::Windows.System.VirtualKey.Right);
                userType.AddEnumValue("Down", global::Windows.System.VirtualKey.Down);
                userType.AddEnumValue("Select", global::Windows.System.VirtualKey.Select);
                userType.AddEnumValue("Print", global::Windows.System.VirtualKey.Print);
                userType.AddEnumValue("Execute", global::Windows.System.VirtualKey.Execute);
                userType.AddEnumValue("Snapshot", global::Windows.System.VirtualKey.Snapshot);
                userType.AddEnumValue("Insert", global::Windows.System.VirtualKey.Insert);
                userType.AddEnumValue("Delete", global::Windows.System.VirtualKey.Delete);
                userType.AddEnumValue("Help", global::Windows.System.VirtualKey.Help);
                userType.AddEnumValue("Number0", global::Windows.System.VirtualKey.Number0);
                userType.AddEnumValue("Number1", global::Windows.System.VirtualKey.Number1);
                userType.AddEnumValue("Number2", global::Windows.System.VirtualKey.Number2);
                userType.AddEnumValue("Number3", global::Windows.System.VirtualKey.Number3);
                userType.AddEnumValue("Number4", global::Windows.System.VirtualKey.Number4);
                userType.AddEnumValue("Number5", global::Windows.System.VirtualKey.Number5);
                userType.AddEnumValue("Number6", global::Windows.System.VirtualKey.Number6);
                userType.AddEnumValue("Number7", global::Windows.System.VirtualKey.Number7);
                userType.AddEnumValue("Number8", global::Windows.System.VirtualKey.Number8);
                userType.AddEnumValue("Number9", global::Windows.System.VirtualKey.Number9);
                userType.AddEnumValue("A", global::Windows.System.VirtualKey.A);
                userType.AddEnumValue("B", global::Windows.System.VirtualKey.B);
                userType.AddEnumValue("C", global::Windows.System.VirtualKey.C);
                userType.AddEnumValue("D", global::Windows.System.VirtualKey.D);
                userType.AddEnumValue("E", global::Windows.System.VirtualKey.E);
                userType.AddEnumValue("F", global::Windows.System.VirtualKey.F);
                userType.AddEnumValue("G", global::Windows.System.VirtualKey.G);
                userType.AddEnumValue("H", global::Windows.System.VirtualKey.H);
                userType.AddEnumValue("I", global::Windows.System.VirtualKey.I);
                userType.AddEnumValue("J", global::Windows.System.VirtualKey.J);
                userType.AddEnumValue("K", global::Windows.System.VirtualKey.K);
                userType.AddEnumValue("L", global::Windows.System.VirtualKey.L);
                userType.AddEnumValue("M", global::Windows.System.VirtualKey.M);
                userType.AddEnumValue("N", global::Windows.System.VirtualKey.N);
                userType.AddEnumValue("O", global::Windows.System.VirtualKey.O);
                userType.AddEnumValue("P", global::Windows.System.VirtualKey.P);
                userType.AddEnumValue("Q", global::Windows.System.VirtualKey.Q);
                userType.AddEnumValue("R", global::Windows.System.VirtualKey.R);
                userType.AddEnumValue("S", global::Windows.System.VirtualKey.S);
                userType.AddEnumValue("T", global::Windows.System.VirtualKey.T);
                userType.AddEnumValue("U", global::Windows.System.VirtualKey.U);
                userType.AddEnumValue("V", global::Windows.System.VirtualKey.V);
                userType.AddEnumValue("W", global::Windows.System.VirtualKey.W);
                userType.AddEnumValue("X", global::Windows.System.VirtualKey.X);
                userType.AddEnumValue("Y", global::Windows.System.VirtualKey.Y);
                userType.AddEnumValue("Z", global::Windows.System.VirtualKey.Z);
                userType.AddEnumValue("LeftWindows", global::Windows.System.VirtualKey.LeftWindows);
                userType.AddEnumValue("RightWindows", global::Windows.System.VirtualKey.RightWindows);
                userType.AddEnumValue("Application", global::Windows.System.VirtualKey.Application);
                userType.AddEnumValue("Sleep", global::Windows.System.VirtualKey.Sleep);
                userType.AddEnumValue("NumberPad0", global::Windows.System.VirtualKey.NumberPad0);
                userType.AddEnumValue("NumberPad1", global::Windows.System.VirtualKey.NumberPad1);
                userType.AddEnumValue("NumberPad2", global::Windows.System.VirtualKey.NumberPad2);
                userType.AddEnumValue("NumberPad3", global::Windows.System.VirtualKey.NumberPad3);
                userType.AddEnumValue("NumberPad4", global::Windows.System.VirtualKey.NumberPad4);
                userType.AddEnumValue("NumberPad5", global::Windows.System.VirtualKey.NumberPad5);
                userType.AddEnumValue("NumberPad6", global::Windows.System.VirtualKey.NumberPad6);
                userType.AddEnumValue("NumberPad7", global::Windows.System.VirtualKey.NumberPad7);
                userType.AddEnumValue("NumberPad8", global::Windows.System.VirtualKey.NumberPad8);
                userType.AddEnumValue("NumberPad9", global::Windows.System.VirtualKey.NumberPad9);
                userType.AddEnumValue("Multiply", global::Windows.System.VirtualKey.Multiply);
                userType.AddEnumValue("Add", global::Windows.System.VirtualKey.Add);
                userType.AddEnumValue("Separator", global::Windows.System.VirtualKey.Separator);
                userType.AddEnumValue("Subtract", global::Windows.System.VirtualKey.Subtract);
                userType.AddEnumValue("Decimal", global::Windows.System.VirtualKey.Decimal);
                userType.AddEnumValue("Divide", global::Windows.System.VirtualKey.Divide);
                userType.AddEnumValue("F1", global::Windows.System.VirtualKey.F1);
                userType.AddEnumValue("F2", global::Windows.System.VirtualKey.F2);
                userType.AddEnumValue("F3", global::Windows.System.VirtualKey.F3);
                userType.AddEnumValue("F4", global::Windows.System.VirtualKey.F4);
                userType.AddEnumValue("F5", global::Windows.System.VirtualKey.F5);
                userType.AddEnumValue("F6", global::Windows.System.VirtualKey.F6);
                userType.AddEnumValue("F7", global::Windows.System.VirtualKey.F7);
                userType.AddEnumValue("F8", global::Windows.System.VirtualKey.F8);
                userType.AddEnumValue("F9", global::Windows.System.VirtualKey.F9);
                userType.AddEnumValue("F10", global::Windows.System.VirtualKey.F10);
                userType.AddEnumValue("F11", global::Windows.System.VirtualKey.F11);
                userType.AddEnumValue("F12", global::Windows.System.VirtualKey.F12);
                userType.AddEnumValue("F13", global::Windows.System.VirtualKey.F13);
                userType.AddEnumValue("F14", global::Windows.System.VirtualKey.F14);
                userType.AddEnumValue("F15", global::Windows.System.VirtualKey.F15);
                userType.AddEnumValue("F16", global::Windows.System.VirtualKey.F16);
                userType.AddEnumValue("F17", global::Windows.System.VirtualKey.F17);
                userType.AddEnumValue("F18", global::Windows.System.VirtualKey.F18);
                userType.AddEnumValue("F19", global::Windows.System.VirtualKey.F19);
                userType.AddEnumValue("F20", global::Windows.System.VirtualKey.F20);
                userType.AddEnumValue("F21", global::Windows.System.VirtualKey.F21);
                userType.AddEnumValue("F22", global::Windows.System.VirtualKey.F22);
                userType.AddEnumValue("F23", global::Windows.System.VirtualKey.F23);
                userType.AddEnumValue("F24", global::Windows.System.VirtualKey.F24);
                userType.AddEnumValue("NavigationView", global::Windows.System.VirtualKey.NavigationView);
                userType.AddEnumValue("NavigationMenu", global::Windows.System.VirtualKey.NavigationMenu);
                userType.AddEnumValue("NavigationUp", global::Windows.System.VirtualKey.NavigationUp);
                userType.AddEnumValue("NavigationDown", global::Windows.System.VirtualKey.NavigationDown);
                userType.AddEnumValue("NavigationLeft", global::Windows.System.VirtualKey.NavigationLeft);
                userType.AddEnumValue("NavigationRight", global::Windows.System.VirtualKey.NavigationRight);
                userType.AddEnumValue("NavigationAccept", global::Windows.System.VirtualKey.NavigationAccept);
                userType.AddEnumValue("NavigationCancel", global::Windows.System.VirtualKey.NavigationCancel);
                userType.AddEnumValue("NumberKeyLock", global::Windows.System.VirtualKey.NumberKeyLock);
                userType.AddEnumValue("Scroll", global::Windows.System.VirtualKey.Scroll);
                userType.AddEnumValue("LeftShift", global::Windows.System.VirtualKey.LeftShift);
                userType.AddEnumValue("RightShift", global::Windows.System.VirtualKey.RightShift);
                userType.AddEnumValue("LeftControl", global::Windows.System.VirtualKey.LeftControl);
                userType.AddEnumValue("RightControl", global::Windows.System.VirtualKey.RightControl);
                userType.AddEnumValue("LeftMenu", global::Windows.System.VirtualKey.LeftMenu);
                userType.AddEnumValue("RightMenu", global::Windows.System.VirtualKey.RightMenu);
                userType.AddEnumValue("GoBack", global::Windows.System.VirtualKey.GoBack);
                userType.AddEnumValue("GoForward", global::Windows.System.VirtualKey.GoForward);
                userType.AddEnumValue("Refresh", global::Windows.System.VirtualKey.Refresh);
                userType.AddEnumValue("Stop", global::Windows.System.VirtualKey.Stop);
                userType.AddEnumValue("Search", global::Windows.System.VirtualKey.Search);
                userType.AddEnumValue("Favorites", global::Windows.System.VirtualKey.Favorites);
                userType.AddEnumValue("GoHome", global::Windows.System.VirtualKey.GoHome);
                userType.AddEnumValue("GamepadA", global::Windows.System.VirtualKey.GamepadA);
                userType.AddEnumValue("GamepadB", global::Windows.System.VirtualKey.GamepadB);
                userType.AddEnumValue("GamepadX", global::Windows.System.VirtualKey.GamepadX);
                userType.AddEnumValue("GamepadY", global::Windows.System.VirtualKey.GamepadY);
                userType.AddEnumValue("GamepadRightShoulder", global::Windows.System.VirtualKey.GamepadRightShoulder);
                userType.AddEnumValue("GamepadLeftShoulder", global::Windows.System.VirtualKey.GamepadLeftShoulder);
                userType.AddEnumValue("GamepadLeftTrigger", global::Windows.System.VirtualKey.GamepadLeftTrigger);
                userType.AddEnumValue("GamepadRightTrigger", global::Windows.System.VirtualKey.GamepadRightTrigger);
                userType.AddEnumValue("GamepadDPadUp", global::Windows.System.VirtualKey.GamepadDPadUp);
                userType.AddEnumValue("GamepadDPadDown", global::Windows.System.VirtualKey.GamepadDPadDown);
                userType.AddEnumValue("GamepadDPadLeft", global::Windows.System.VirtualKey.GamepadDPadLeft);
                userType.AddEnumValue("GamepadDPadRight", global::Windows.System.VirtualKey.GamepadDPadRight);
                userType.AddEnumValue("GamepadMenu", global::Windows.System.VirtualKey.GamepadMenu);
                userType.AddEnumValue("GamepadView", global::Windows.System.VirtualKey.GamepadView);
                userType.AddEnumValue("GamepadLeftThumbstickButton", global::Windows.System.VirtualKey.GamepadLeftThumbstickButton);
                userType.AddEnumValue("GamepadRightThumbstickButton", global::Windows.System.VirtualKey.GamepadRightThumbstickButton);
                userType.AddEnumValue("GamepadLeftThumbstickUp", global::Windows.System.VirtualKey.GamepadLeftThumbstickUp);
                userType.AddEnumValue("GamepadLeftThumbstickDown", global::Windows.System.VirtualKey.GamepadLeftThumbstickDown);
                userType.AddEnumValue("GamepadLeftThumbstickRight", global::Windows.System.VirtualKey.GamepadLeftThumbstickRight);
                userType.AddEnumValue("GamepadLeftThumbstickLeft", global::Windows.System.VirtualKey.GamepadLeftThumbstickLeft);
                userType.AddEnumValue("GamepadRightThumbstickUp", global::Windows.System.VirtualKey.GamepadRightThumbstickUp);
                userType.AddEnumValue("GamepadRightThumbstickDown", global::Windows.System.VirtualKey.GamepadRightThumbstickDown);
                userType.AddEnumValue("GamepadRightThumbstickRight", global::Windows.System.VirtualKey.GamepadRightThumbstickRight);
                userType.AddEnumValue("GamepadRightThumbstickLeft", global::Windows.System.VirtualKey.GamepadRightThumbstickLeft);
                xamlType = userType;
                break;

            case 84:   //  Template10.Behaviors.KeyBehavior.Kinds
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("KeyUp", global::Template10.Behaviors.KeyBehavior.Kinds.KeyUp);
                userType.AddEnumValue("KeyDown", global::Template10.Behaviors.KeyBehavior.Kinds.KeyDown);
                xamlType = userType;
                break;

            case 85:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger"));
                userType.Activator = Activate_85_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                xamlType = userType;
                break;

            case 86:   //  Microsoft.Xaml.Interactivity.Trigger
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("Actions");
                xamlType = userType;
                break;

            case 87:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 88:   //  Template10.Behaviors.FocusAction
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_88_FocusAction;
                userType.AddMemberName("TargetObject");
                xamlType = userType;
                break;

            case 89:   //  Microsoft.Xaml.Interactions.Core.CallMethodAction
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_89_CallMethodAction;
                userType.AddMemberName("MethodName");
                userType.AddMemberName("TargetObject");
                xamlType = userType;
                break;

            case 90:   //  BluetoothLEExplorer.Views.Beacon
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_90_Beacon;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 91:   //  BluetoothLEExplorer.Views.Busy
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_91_Busy;
                userType.AddMemberName("BusyText");
                userType.AddMemberName("IsBusy");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 92:   //  BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_92_CharacteristicPageViewModel;
                userType.AddMemberName("NotifyUser");
                userType.AddMemberName("Characteristic");
                userType.AddMemberName("SelectedDescriptor");
                userType.AddMemberName("Properties");
                userType.AddMemberName("Notify");
                userType.AddMemberName("NotifyProgress");
                userType.AddMemberName("NotifyError");
                userType.AddMemberName("Indicate");
                userType.AddMemberName("IndicateProgress");
                userType.AddMemberName("IndicateError");
                userType.AddMemberName("CharacteristicCanBeRead");
                userType.AddMemberName("CharacteristicCanWrite");
                userType.AddMemberName("CharacteristicCanNotify");
                userType.AddMemberName("CharacteristicCanIndicate");
                userType.AddMemberName("CharacteristicCanNotifyOrIndicate");
                userType.AddMemberName("CharacteristicValueVisible");
                userType.AddMemberName("ValueToWrite");
                userType.AddMemberName("WriteType");
                userType.AddMemberName("UseWindowsNotifications");
                userType.AddMemberName("DeviceName");
                userType.AddMemberName("DisplayPresentError");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 93:   //  System.Collections.ObjectModel.ObservableCollection`1<String>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<String>"));
                userType.CollectionAdd = VectorAdd_93_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 94:   //  System.Collections.ObjectModel.Collection`1<String>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_94_Collection;
                userType.CollectionAdd = VectorAdd_94_Collection;
                xamlType = userType;
                break;

            case 95:   //  BluetoothLEExplorer.Models.ObservableGattCharacteristics
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Characteristic");
                userType.AddMemberName("IsIndicateSet");
                userType.AddMemberName("IsNotifySet");
                userType.AddMemberName("Parent");
                userType.AddMemberName("Descriptors");
                userType.AddMemberName("SelectedDescriptor");
                userType.AddMemberName("Name");
                userType.AddMemberName("UUID");
                userType.AddMemberName("Value");
                userType.AddMemberName("DisplayType");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 96:   //  BluetoothLEExplorer.Models.ObservableGattDescriptors
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Descriptor");
                userType.AddMemberName("Parent");
                userType.AddMemberName("Name");
                userType.AddMemberName("UUID");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 97:   //  BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("NotSet", global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes.NotSet);
                userType.AddEnumValue("Decimal", global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes.Decimal);
                userType.AddEnumValue("Hex", global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes.Hex);
                userType.AddEnumValue("UTF8", global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes.UTF8);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 98:   //  BluetoothLEExplorer.Services.Converters.DisplayTypeToBooleanConverter
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_98_DisplayTypeToBooleanConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 99:   //  BluetoothLEExplorer.Services.Converters.WriteTypeToBooleanConverter
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_99_WriteTypeToBooleanConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 100:   //  BluetoothLEExplorer.Views.CharacteristicPage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_100_CharacteristicPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 101:   //  BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_101_DeviceServicesPageViewModel;
                userType.AddMemberName("Device");
                userType.AddMemberName("IsSecureConnectionSupported");
                userType.AddMemberName("ErrorText");
                userType.AddMemberName("SelectedCharacteristic");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 102:   //  BluetoothLEExplorer.Models.ObservableBluetoothLEDevice
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("BluetoothLEDevice");
                userType.AddMemberName("Glyph");
                userType.AddMemberName("DeviceInfo");
                userType.AddMemberName("IsConnected");
                userType.AddMemberName("IsConnectable");
                userType.AddMemberName("LastSeenTime");
                userType.AddMemberName("IsPaired");
                userType.AddMemberName("IsSecureConnection");
                userType.AddMemberName("Services");
                userType.AddMemberName("ServiceCount");
                userType.AddMemberName("Name");
                userType.AddMemberName("ErrorText");
                userType.AddMemberName("RSSI");
                userType.AddMemberName("BatteryLevel");
                userType.AddMemberName("BluetoothAddressAsString");
                userType.AddMemberName("BluetoothAddressAsUlong");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 103:   //  BluetoothLEExplorer.Views.BackgroundColorConverter
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_103_BackgroundColorConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 104:   //  BluetoothLEExplorer.Views.DeviceServicesPage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_104_DeviceServicesPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 105:   //  BluetoothLEExplorer.ViewModels.DiscoverViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_105_DiscoverViewModel;
                userType.AddMemberName("Context");
                userType.AddMemberName("DeviceList");
                userType.AddMemberName("SelectedDevice");
                userType.AddMemberName("IsEnumerating");
                userType.AddMemberName("EnumerationFinished");
                userType.AddMemberName("ContinuousEnumeration");
                userType.AddMemberName("IsPeripheralRoleSupported");
                userType.AddMemberName("IsCentralRoleSupported");
                userType.AddMemberName("GridFilter");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 106:   //  BluetoothLEExplorer.Models.GattSampleContext
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 107:   //  SortedObservableCollection.SortedObservableCollection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>"));
                userType.CollectionAdd = VectorAdd_107_SortedObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 108:   //  System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>"));
                userType.Activator = Activate_108_ObservableCollection;
                userType.CollectionAdd = VectorAdd_108_ObservableCollection;
                xamlType = userType;
                break;

            case 109:   //  System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_109_Collection;
                userType.CollectionAdd = VectorAdd_109_Collection;
                xamlType = userType;
                break;

            case 110:   //  Windows.Devices.Bluetooth.BluetoothLEDevice
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 111:   //  Windows.UI.Xaml.Media.Imaging.BitmapImage
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 112:   //  Windows.Devices.Enumeration.DeviceInformation
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 113:   //  System.DateTime
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 114:   //  System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattDeviceService>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattDeviceService>"));
                userType.CollectionAdd = VectorAdd_114_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 115:   //  System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattDeviceService>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_115_Collection;
                userType.CollectionAdd = VectorAdd_115_Collection;
                xamlType = userType;
                break;

            case 116:   //  BluetoothLEExplorer.Models.ObservableGattDeviceService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Service");
                userType.AddMemberName("Characteristics");
                userType.AddMemberName("SelectedCharacteristic");
                userType.AddMemberName("Name");
                userType.AddMemberName("UUID");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 117:   //  Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 118:   //  System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattCharacteristics>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattCharacteristics>"));
                userType.CollectionAdd = VectorAdd_118_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 119:   //  System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattCharacteristics>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_119_Collection;
                userType.CollectionAdd = VectorAdd_119_Collection;
                xamlType = userType;
                break;

            case 120:   //  Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 121:   //  System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattDescriptors>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattDescriptors>"));
                userType.CollectionAdd = VectorAdd_121_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 122:   //  System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattDescriptors>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_122_Collection;
                userType.CollectionAdd = VectorAdd_122_Collection;
                xamlType = userType;
                break;

            case 123:   //  Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 124:   //  BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("NotSet", global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes.NotSet);
                userType.AddEnumValue("Bool", global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes.Bool);
                userType.AddEnumValue("Decimal", global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes.Decimal);
                userType.AddEnumValue("Hex", global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes.Hex);
                userType.AddEnumValue("UTF8", global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes.UTF8);
                userType.AddEnumValue("UTF16", global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes.UTF16);
                userType.AddEnumValue("Unsupported", global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes.Unsupported);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 125:   //  Int32
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 126:   //  UInt64
                xamlType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 127:   //  BluetoothLEExplorer.Views.Discover
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_127_Discover;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 128:   //  BluetoothLEExplorer.ViewModels.SettingsPageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_128_SettingsPageViewModel;
                userType.AddMemberName("SettingsPartViewModel");
                userType.AddMemberName("AboutPartViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 129:   //  BluetoothLEExplorer.ViewModels.SettingsPartViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 130:   //  BluetoothLEExplorer.ViewModels.AboutPartViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 131:   //  BluetoothLEExplorer.Views.SettingsPage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_131_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 132:   //  BluetoothLEExplorer.ViewModels.ShellViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_132_ShellViewModel;
                userType.AddMemberName("IsPeripheralRoleSupported");
                userType.AddMemberName("IsCentralRoleSupported");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 133:   //  BluetoothLEExplorer.Services.Converters.ShellFontConverter
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_133_ShellFontConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 134:   //  BluetoothLEExplorer.Views.Shell
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_134_Shell;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 135:   //  BluetoothLEExplorer.Views.Splash
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 136:   //  BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_136_VirtualKeyboardPageViewModel;
                userType.AddMemberName("SubscribedGattClients");
                userType.AddMemberName("IsPeripheralRoleSupported");
                userType.AddMemberName("IsCentralRoleSupported");
                userType.AddMemberName("IsSettingUp");
                userType.AddMemberName("IsKeyboardEnabled");
                userType.AddMemberName("ErrorText");
                userType.AddMemberName("Context");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 137:   //  System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattClient>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattClient>"));
                userType.CollectionAdd = VectorAdd_137_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 138:   //  System.Collections.ObjectModel.Collection`1<BluetoothLEExplorer.Models.ObservableGattClient>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_138_Collection;
                userType.CollectionAdd = VectorAdd_138_Collection;
                xamlType = userType;
                break;

            case 139:   //  BluetoothLEExplorer.Models.ObservableGattClient
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("IsConnected");
                userType.AddMemberName("Name");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 140:   //  BluetoothLEExplorer.Views.VirtualKeyboardPage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_140_VirtualKeyboardPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 141:   //  BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_141_VirtualPeripheralPageViewModel;
                userType.AddMemberName("AvailableServices");
                userType.AddMemberName("NewSelectedService");
                userType.AddMemberName("SelectedService");
                userType.AddMemberName("IsPeripheralRoleSupported");
                userType.AddMemberName("IsCentralRoleSupported");
                userType.AddMemberName("Context");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 142:   //  System.Collections.Generic.List`1<String>
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_142_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 143:   //  BluetoothLEExplorer.Views.VirtualPeripheralPage
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_143_VirtualPeripheralPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 144:   //  BluetoothLEExplorer.App
                userType = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Common.BootStrapper"));
                userType.Activator = Activate_144_App;
                userType.SetIsBindable();
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BootStrapper_SessionState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SessionState;
        }
        private void set_0_BootStrapper_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.SessionState = (global::Template10.Common.StateItems)Value;
        }
        private object get_1_BootStrapper_NavigationService(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.NavigationService;
        }
        private object get_2_BootStrapper_SplashFactory(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SplashFactory;
        }
        private object get_3_BootStrapper_CacheMaxDuration(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CacheMaxDuration;
        }
        private void set_3_BootStrapper_CacheMaxDuration(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CacheMaxDuration = (global::System.TimeSpan)Value;
        }
        private object get_4_BootStrapper_ShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ShowShellBackButton;
        }
        private void set_4_BootStrapper_ShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_5_BootStrapper_ForceShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ForceShowShellBackButton;
        }
        private void set_5_BootStrapper_ForceShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ForceShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_6_BootStrapper_OriginalActivatedArgs(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.OriginalActivatedArgs;
        }
        private object get_7_BootStrapper_CurrentState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CurrentState;
        }
        private void set_7_BootStrapper_CurrentState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CurrentState = (global::Template10.Common.BootStrapper.States)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.EnableAutoRestoreAfterTerminated;
        }
        private void set_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.EnableAutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
#pragma warning restore 0618
        private object get_9_BootStrapper_AutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoRestoreAfterTerminated;
        }
        private void set_9_BootStrapper_AutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_10_BootStrapper_AutoExtendExecutionSession(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoExtendExecutionSession;
        }
        private void set_10_BootStrapper_AutoExtendExecutionSession(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoExtendExecutionSession = (global::System.Boolean)Value;
        }
        private object get_11_BootStrapper_AutoSuspendAllFrames(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoSuspendAllFrames;
        }
        private void set_11_BootStrapper_AutoSuspendAllFrames(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoSuspendAllFrames = (global::System.Boolean)Value;
        }
        private object get_12_BootStrapper_ModalDialog(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalDialog;
        }
        private object get_13_BootStrapper_ModalContent(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalContent;
        }
        private void set_13_BootStrapper_ModalContent(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ModalContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_14_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_14_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_15_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_15_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_16_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_16_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_17_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_17_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_18_GattLocalCharacteristicControl_Value(object instance)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            return that.Value;
        }
        private void set_18_GattLocalCharacteristicControl_Value(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            that.Value = (global::System.String)Value;
        }
        private object get_19_GattLocalCharacteristicControl_Characteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            return that.Characteristic;
        }
        private void set_19_GattLocalCharacteristicControl_Characteristic(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            that.Characteristic = (global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel)Value;
        }
        private object get_20_GattLocalCharacteristicControl_ShowValue(object instance)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            return that.ShowValue;
        }
        private void set_20_GattLocalCharacteristicControl_ShowValue(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            that.ShowValue = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_21_GattLocalCharacteristicControl_IsReadOnly(object instance)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            return that.IsReadOnly;
        }
        private void set_21_GattLocalCharacteristicControl_IsReadOnly(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_22_HamburgerMenu_PrimaryButtons(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PrimaryButtons;
        }
        private void set_22_HamburgerMenu_PrimaryButtons(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PrimaryButtons = (global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>)Value;
        }
        private object get_23_HamburgerButtonInfo_Content(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Content;
        }
        private void set_23_HamburgerButtonInfo_Content(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Content = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_24_HamburgerButtonInfo_ButtonType(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ButtonType;
        }
        private void set_24_HamburgerButtonInfo_ButtonType(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ButtonType = (global::Template10.Controls.HamburgerButtonInfo.ButtonTypes)Value;
        }
        private object get_25_HamburgerButtonInfo_NavigationTransitionInfo(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.NavigationTransitionInfo;
        }
        private void set_25_HamburgerButtonInfo_NavigationTransitionInfo(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.NavigationTransitionInfo = (global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo)Value;
        }
        private object get_26_HamburgerButtonInfo_Command(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Command;
        }
        private void set_26_HamburgerButtonInfo_Command(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_27_HamburgerButtonInfo_ToolTip(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ToolTip;
        }
        private void set_27_HamburgerButtonInfo_ToolTip(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ToolTip = (global::System.Object)Value;
        }
        private object get_28_HamburgerButtonInfo_CommandParameter(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.CommandParameter;
        }
        private void set_28_HamburgerButtonInfo_CommandParameter(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_29_HamburgerButtonInfo_GroupName(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.GroupName;
        }
        private void set_29_HamburgerButtonInfo_GroupName(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.GroupName = (global::System.Object)Value;
        }
        private object get_30_HamburgerButtonInfo_PageType(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.PageType;
        }
        private void set_30_HamburgerButtonInfo_PageType(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.PageType = (global::System.Type)Value;
        }
        private object get_31_HamburgerButtonInfo_PageParameter(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.PageParameter;
        }
        private void set_31_HamburgerButtonInfo_PageParameter(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.PageParameter = (global::System.Object)Value;
        }
        private object get_32_HamburgerButtonInfo_ClearHistory(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ClearHistory;
        }
        private void set_32_HamburgerButtonInfo_ClearHistory(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ClearHistory = (global::System.Boolean)Value;
        }
        private object get_33_HamburgerButtonInfo_ClearCache(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ClearCache;
        }
        private void set_33_HamburgerButtonInfo_ClearCache(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ClearCache = (global::System.Boolean)Value;
        }
        private object get_34_HamburgerButtonInfo_Visibility(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Visibility;
        }
        private void set_34_HamburgerButtonInfo_Visibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Visibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_35_HamburgerButtonInfo_IsEnabled(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.IsEnabled;
        }
        private void set_35_HamburgerButtonInfo_IsEnabled(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_36_HamburgerButtonInfo_IsChecked(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.IsChecked;
        }
        private void set_36_HamburgerButtonInfo_IsChecked(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.IsChecked = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_37_HamburgerButtonInfo_MaxWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.MaxWidth;
        }
        private void set_37_HamburgerButtonInfo_MaxWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_38_HamburgerMenu_PaneBorderThickness(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneBorderThickness;
        }
        private void set_38_HamburgerMenu_PaneBorderThickness(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneBorderThickness = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_39_HamburgerMenu_SecondarySeparator(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondarySeparator;
        }
        private void set_39_HamburgerMenu_SecondarySeparator(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondarySeparator = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_40_HamburgerMenu_NavButtonBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonBackground;
        }
        private void set_40_HamburgerMenu_NavButtonBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_41_HamburgerMenu_NavButtonForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonForeground;
        }
        private void set_41_HamburgerMenu_NavButtonForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_42_HamburgerMenu_NavAreaBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavAreaBackground;
        }
        private void set_42_HamburgerMenu_NavAreaBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavAreaBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_43_HamburgerMenu_HamburgerForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerForeground;
        }
        private void set_43_HamburgerMenu_HamburgerForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_44_HamburgerMenu_HamburgerBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerBackground;
        }
        private void set_44_HamburgerMenu_HamburgerBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_45_HamburgerMenu_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_45_HamburgerMenu_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_46_HamburgerMenu_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_46_HamburgerMenu_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_47_HamburgerMenu_VisualStateWideMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateWideMinWidth;
        }
        private void set_47_HamburgerMenu_VisualStateWideMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateWideMinWidth = (global::System.Double)Value;
        }
        private object get_48_HamburgerMenu_AccentColor(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.AccentColor;
        }
        private void set_48_HamburgerMenu_AccentColor(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.AccentColor = (global::Windows.UI.Color)Value;
        }
        private object get_49_HamburgerMenu_PaneBorderBrush(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneBorderBrush;
        }
        private void set_49_HamburgerMenu_PaneBorderBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_50_HamburgerMenu_NavButtonCheckedForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedForeground;
        }
        private void set_50_HamburgerMenu_NavButtonCheckedForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_51_HamburgerMenu_NavButtonCheckedBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedBackground;
        }
        private void set_51_HamburgerMenu_NavButtonCheckedBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_52_HamburgerMenu_NavButtonCheckedIndicatorBrush(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedIndicatorBrush;
        }
        private void set_52_HamburgerMenu_NavButtonCheckedIndicatorBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedIndicatorBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_53_HamburgerMenu_NavButtonPressedForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonPressedForeground;
        }
        private void set_53_HamburgerMenu_NavButtonPressedForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonPressedForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_54_HamburgerMenu_NavButtonPressedBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonPressedBackground;
        }
        private void set_54_HamburgerMenu_NavButtonPressedBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonPressedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_55_HamburgerMenu_NavButtonHoverForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonHoverForeground;
        }
        private void set_55_HamburgerMenu_NavButtonHoverForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonHoverForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_56_HamburgerMenu_NavButtonHoverBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonHoverBackground;
        }
        private void set_56_HamburgerMenu_NavButtonHoverBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonHoverBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_57_HamburgerMenu_HamburgerButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerButtonVisibility;
        }
        private void set_57_HamburgerMenu_HamburgerButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_58_HamburgerMenu_DisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.DisplayMode;
        }
        private void set_58_HamburgerMenu_DisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.DisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_59_HamburgerMenu_VisualStateNarrowDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNarrowDisplayMode;
        }
        private void set_59_HamburgerMenu_VisualStateNarrowDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNarrowDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_60_HamburgerMenu_VisualStateNormalDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNormalDisplayMode;
        }
        private void set_60_HamburgerMenu_VisualStateNormalDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNormalDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_61_HamburgerMenu_VisualStateWideDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateWideDisplayMode;
        }
        private void set_61_HamburgerMenu_VisualStateWideDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateWideDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_62_HamburgerMenu_SecondaryButtonOrientation(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondaryButtonOrientation;
        }
        private void set_62_HamburgerMenu_SecondaryButtonOrientation(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondaryButtonOrientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_63_HamburgerMenu_Selected(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.Selected;
        }
        private void set_63_HamburgerMenu_Selected(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.Selected = (global::Template10.Controls.HamburgerButtonInfo)Value;
        }
        private object get_64_HamburgerMenu_NavigationService(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavigationService;
        }
        private void set_64_HamburgerMenu_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_65_HamburgerMenu_IsFullScreen(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.IsFullScreen;
        }
        private void set_65_HamburgerMenu_IsFullScreen(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.IsFullScreen = (global::System.Boolean)Value;
        }
        private object get_66_HamburgerMenu_PaneWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneWidth;
        }
        private void set_66_HamburgerMenu_PaneWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneWidth = (global::System.Double)Value;
        }
        private object get_67_HamburgerMenu_HamburgerButtonGridWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerButtonGridWidth;
        }
        private void set_67_HamburgerMenu_HamburgerButtonGridWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerButtonGridWidth = (global::System.Double)Value;
        }
        private object get_68_HamburgerMenu_OpenCloseMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.OpenCloseMode;
        }
        private void set_68_HamburgerMenu_OpenCloseMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.OpenCloseMode = (global::Template10.Controls.HamburgerMenu.OpenCloseModes)Value;
        }
        private object get_69_HamburgerMenu_HeaderContent(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HeaderContent;
        }
        private void set_69_HamburgerMenu_HeaderContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HeaderContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_70_HamburgerMenu_IsOpen(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.IsOpen;
        }
        private void set_70_HamburgerMenu_IsOpen(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_71_HamburgerMenu_SecondaryButtons(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondaryButtons;
        }
        private void set_71_HamburgerMenu_SecondaryButtons(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondaryButtons = (global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>)Value;
        }
        private object get_72_HamburgerMenu_NavCommand(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavCommand;
        }
        private object get_73_HamburgerMenu_PropertyChangedHandlers(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PropertyChangedHandlers;
        }
        private object get_74_PageHeader_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_74_PageHeader_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_75_PageHeader_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_75_PageHeader_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_76_PageHeader_EllipsisVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EllipsisVisibility;
        }
        private void set_76_PageHeader_EllipsisVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EllipsisVisibility = (global::Template10.Behaviors.EllipsisBehavior.Visibilities)Value;
        }
        private object get_77_PageHeader_PrimaryCommandsVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.PrimaryCommandsVisibility;
        }
        private void set_77_PageHeader_PrimaryCommandsVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.PrimaryCommandsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_78_PageHeader_BackButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonVisibility;
        }
        private void set_78_PageHeader_BackButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_79_PageHeader_BackButtonContent(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonContent;
        }
        private void set_79_PageHeader_BackButtonContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonContent = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_80_PageHeader_Frame(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Frame;
        }
        private void set_80_PageHeader_Frame(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_81_PageHeader_EnableHamburgerMenuAutoLayout(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EnableHamburgerMenuAutoLayout;
        }
        private void set_81_PageHeader_EnableHamburgerMenuAutoLayout(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EnableHamburgerMenuAutoLayout = (global::System.Boolean)Value;
        }
        private object get_82_PageHeader_Text(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Text;
        }
        private void set_82_PageHeader_Text(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_83_Resizer_ElementControl(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.ElementControl;
        }
        private void set_83_Resizer_ElementControl(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.ElementControl = (global::Windows.UI.Xaml.Controls.Control)Value;
        }
        private object get_84_Resizer_GrabberBrush(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberBrush;
        }
        private void set_84_Resizer_GrabberBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_85_Resizer_GrabberVisibility(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberVisibility;
        }
        private void set_85_Resizer_GrabberVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_86_Resizer_GrabberSize(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberSize;
        }
        private void set_86_Resizer_GrabberSize(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_87_AlertNotificationServicePageViewModel_ServiceVM(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel)instance;
            return that.ServiceVM;
        }
        private void set_87_AlertNotificationServicePageViewModel_ServiceVM(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel)instance;
            that.ServiceVM = (global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel)Value;
        }
        private object get_88_AlertNotificationServicePageViewModel_Service(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel)instance;
            return that.Service;
        }
        private void set_88_AlertNotificationServicePageViewModel_Service(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel)instance;
            that.Service = (global::GattServicesLibrary.Services.AlertNotificationService)Value;
        }
        private object get_89_AlertNotificationServicePageViewModel_NewAlert(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel)instance;
            return that.NewAlert;
        }
        private object get_90_AlertNotificationServicePageViewModel_UnreadAlertStatus(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel)instance;
            return that.UnreadAlertStatus;
        }
        private object get_91_AlertNotificationServicePageViewModel_AlertNotificationControlPoint(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel)instance;
            return that.AlertNotificationControlPoint;
        }
        private object get_92_ViewModelBase_NavigationService(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.NavigationService;
        }
        private void set_92_ViewModelBase_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_93_ViewModelBase_Dispatcher(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.Dispatcher;
        }
        private void set_93_ViewModelBase_Dispatcher(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.Dispatcher = (global::Template10.Common.IDispatcherWrapper)Value;
        }
        private object get_94_ViewModelBase_SessionState(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.SessionState;
        }
        private void set_94_ViewModelBase_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.SessionState = (global::Template10.Common.IStateItems)Value;
        }
        private object get_95_BloodPressureServicePageViewModel_ServiceVM(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel)instance;
            return that.ServiceVM;
        }
        private void set_95_BloodPressureServicePageViewModel_ServiceVM(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel)instance;
            that.ServiceVM = (global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel)Value;
        }
        private object get_96_BloodPressureServicePageViewModel_Service(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel)instance;
            return that.Service;
        }
        private void set_96_BloodPressureServicePageViewModel_Service(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel)instance;
            that.Service = (global::GattServicesLibrary.Services.BloodPressureService)Value;
        }
        private object get_97_BloodPressureServicePageViewModel_BloodPressureMeasurement(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel)instance;
            return that.BloodPressureMeasurement;
        }
        private object get_98_BloodPressureServicePageViewModel_BloodPressureFeature(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel)instance;
            return that.BloodPressureFeature;
        }
        private object get_99_ValueWhenConverter_When(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.When;
        }
        private void set_99_ValueWhenConverter_When(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.When = (global::System.Object)Value;
        }
        private object get_100_ValueWhenConverter_Value(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Value;
        }
        private void set_100_ValueWhenConverter_Value(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_101_ValueWhenConverter_Otherwise(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Otherwise;
        }
        private void set_101_ValueWhenConverter_Otherwise(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Otherwise = (global::System.Object)Value;
        }
        private object get_102_ValueWhenConverter_OtherwiseValueBack(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.OtherwiseValueBack;
        }
        private void set_102_ValueWhenConverter_OtherwiseValueBack(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.OtherwiseValueBack = (global::System.Object)Value;
        }
        private object get_103_ValueWhenConverter_Debug(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Debug;
        }
        private void set_103_ValueWhenConverter_Debug(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Debug = (global::System.Boolean)Value;
        }
        private object get_104_CurrentTimeServicePageViewModel_ServiceVM(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel)instance;
            return that.ServiceVM;
        }
        private void set_104_CurrentTimeServicePageViewModel_ServiceVM(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel)instance;
            that.ServiceVM = (global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel)Value;
        }
        private object get_105_CurrentTimeServicePageViewModel_Service(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel)instance;
            return that.Service;
        }
        private void set_105_CurrentTimeServicePageViewModel_Service(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel)instance;
            that.Service = (global::GattServicesLibrary.Services.CurrentTimeService)Value;
        }
        private object get_106_CurrentTimeServicePageViewModel_CurrentTime(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel)instance;
            return that.CurrentTime;
        }
        private object get_107_CurrentTimeServicePageViewModel_UnreadAlertStatus(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel)instance;
            return that.UnreadAlertStatus;
        }
        private object get_108_HeartRateServicePageViewModel_ServiceVM(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel)instance;
            return that.ServiceVM;
        }
        private void set_108_HeartRateServicePageViewModel_ServiceVM(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel)instance;
            that.ServiceVM = (global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel)Value;
        }
        private object get_109_HeartRateServicePageViewModel_Service(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel)instance;
            return that.Service;
        }
        private void set_109_HeartRateServicePageViewModel_Service(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel)instance;
            that.Service = (global::GattServicesLibrary.Services.HeartRateService)Value;
        }
        private object get_110_HeartRateServicePageViewModel_HeartRateMeasurement(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel)instance;
            return that.HeartRateMeasurement;
        }
        private object get_111_MicrosoftServicePageViewModel_ServiceVM(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            return that.ServiceVM;
        }
        private void set_111_MicrosoftServicePageViewModel_ServiceVM(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            that.ServiceVM = (global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel)Value;
        }
        private object get_112_MicrosoftServicePageViewModel_Service(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            return that.Service;
        }
        private void set_112_MicrosoftServicePageViewModel_Service(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            that.Service = (global::GattServicesLibrary.Services.MicrosoftService)Value;
        }
        private object get_113_MicrosoftServicePageViewModel_ReadCharacteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            return that.ReadCharacteristic;
        }
        private object get_114_MicrosoftServicePageViewModel_WriteCharacteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            return that.WriteCharacteristic;
        }
        private object get_115_MicrosoftServicePageViewModel_NotifyCharacteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            return that.NotifyCharacteristic;
        }
        private object get_116_MicrosoftServicePageViewModel_IndicateCharacteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            return that.IndicateCharacteristic;
        }
        private object get_117_MicrosoftServicePageViewModel_ReadLongCharacteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel)instance;
            return that.ReadLongCharacteristic;
        }
        private object get_118_BatteryServicePageViewModel_ServiceVM(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel)instance;
            return that.ServiceVM;
        }
        private void set_118_BatteryServicePageViewModel_ServiceVM(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel)instance;
            that.ServiceVM = (global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel)Value;
        }
        private object get_119_BatteryServicePageViewModel_Service(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel)instance;
            return that.Service;
        }
        private void set_119_BatteryServicePageViewModel_Service(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel)instance;
            that.Service = (global::GattServicesLibrary.Services.BatteryService)Value;
        }
        private object get_120_BatteryServicePageViewModel_BatteryLevel(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel)instance;
            return that.BatteryLevel;
        }
        private object get_121_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_121_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_122_KeyBehavior_Actions(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.Actions;
        }
        private object get_123_KeyBehavior_Key(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.Key;
        }
        private void set_123_KeyBehavior_Key(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.Key = (global::Windows.System.VirtualKey)Value;
        }
        private object get_124_KeyBehavior_AssociatedObject(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_125_KeyBehavior_AndControl(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AndControl;
        }
        private void set_125_KeyBehavior_AndControl(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.AndControl = (global::System.Boolean)Value;
        }
        private object get_126_KeyBehavior_AndAlt(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AndAlt;
        }
        private void set_126_KeyBehavior_AndAlt(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.AndAlt = (global::System.Boolean)Value;
        }
        private object get_127_KeyBehavior_AndShift(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AndShift;
        }
        private void set_127_KeyBehavior_AndShift(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.AndShift = (global::System.Boolean)Value;
        }
        private object get_128_KeyBehavior_Event(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.Event;
        }
        private void set_128_KeyBehavior_Event(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.Event = (global::Template10.Behaviors.KeyBehavior.Kinds)Value;
        }
        private object get_129_Trigger_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Trigger)instance;
            return that.Actions;
        }
        private object get_130_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_130_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_131_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_131_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_132_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior)instance;
            return that.AssociatedObject;
        }
        private object get_133_FocusAction_TargetObject(object instance)
        {
            var that = (global::Template10.Behaviors.FocusAction)instance;
            return that.TargetObject;
        }
        private void set_133_FocusAction_TargetObject(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.FocusAction)instance;
            that.TargetObject = (global::Windows.UI.Xaml.Controls.Control)Value;
        }
        private object get_134_CallMethodAction_MethodName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            return that.MethodName;
        }
        private void set_134_CallMethodAction_MethodName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            that.MethodName = (global::System.String)Value;
        }
        private object get_135_CallMethodAction_TargetObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            return that.TargetObject;
        }
        private void set_135_CallMethodAction_TargetObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.CallMethodAction)instance;
            that.TargetObject = (global::System.Object)Value;
        }
        private object get_136_Busy_BusyText(object instance)
        {
            var that = (global::BluetoothLEExplorer.Views.Busy)instance;
            return that.BusyText;
        }
        private void set_136_Busy_BusyText(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Views.Busy)instance;
            that.BusyText = (global::System.String)Value;
        }
        private object get_137_Busy_IsBusy(object instance)
        {
            var that = (global::BluetoothLEExplorer.Views.Busy)instance;
            return that.IsBusy;
        }
        private void set_137_Busy_IsBusy(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Views.Busy)instance;
            that.IsBusy = (global::System.Boolean)Value;
        }
        private object get_138_CharacteristicPageViewModel_NotifyUser(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.NotifyUser;
        }
        private void set_138_CharacteristicPageViewModel_NotifyUser(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.NotifyUser = (global::System.Collections.ObjectModel.ObservableCollection<global::System.String>)Value;
        }
        private object get_139_CharacteristicPageViewModel_Characteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.Characteristic;
        }
        private void set_139_CharacteristicPageViewModel_Characteristic(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.Characteristic = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)Value;
        }
        private object get_140_CharacteristicPageViewModel_SelectedDescriptor(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.SelectedDescriptor;
        }
        private void set_140_CharacteristicPageViewModel_SelectedDescriptor(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.SelectedDescriptor = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)Value;
        }
        private object get_141_CharacteristicPageViewModel_Properties(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.Properties;
        }
        private object get_142_CharacteristicPageViewModel_Notify(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.Notify;
        }
        private void set_142_CharacteristicPageViewModel_Notify(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.Notify = (global::System.Boolean)Value;
        }
        private object get_143_CharacteristicPageViewModel_NotifyProgress(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.NotifyProgress;
        }
        private void set_143_CharacteristicPageViewModel_NotifyProgress(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.NotifyProgress = (global::System.Boolean)Value;
        }
        private object get_144_CharacteristicPageViewModel_NotifyError(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.NotifyError;
        }
        private object get_145_CharacteristicPageViewModel_Indicate(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.Indicate;
        }
        private void set_145_CharacteristicPageViewModel_Indicate(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.Indicate = (global::System.Boolean)Value;
        }
        private object get_146_CharacteristicPageViewModel_IndicateProgress(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.IndicateProgress;
        }
        private void set_146_CharacteristicPageViewModel_IndicateProgress(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.IndicateProgress = (global::System.Boolean)Value;
        }
        private object get_147_CharacteristicPageViewModel_IndicateError(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.IndicateError;
        }
        private object get_148_CharacteristicPageViewModel_CharacteristicCanBeRead(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.CharacteristicCanBeRead;
        }
        private object get_149_CharacteristicPageViewModel_CharacteristicCanWrite(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.CharacteristicCanWrite;
        }
        private object get_150_CharacteristicPageViewModel_CharacteristicCanNotify(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.CharacteristicCanNotify;
        }
        private object get_151_CharacteristicPageViewModel_CharacteristicCanIndicate(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.CharacteristicCanIndicate;
        }
        private object get_152_CharacteristicPageViewModel_CharacteristicCanNotifyOrIndicate(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.CharacteristicCanNotifyOrIndicate;
        }
        private object get_153_CharacteristicPageViewModel_CharacteristicValueVisible(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.CharacteristicValueVisible;
        }
        private object get_154_CharacteristicPageViewModel_ValueToWrite(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.ValueToWrite;
        }
        private void set_154_CharacteristicPageViewModel_ValueToWrite(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.ValueToWrite = (global::System.String)Value;
        }
        private object get_155_CharacteristicPageViewModel_WriteType(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.WriteType;
        }
        private void set_155_CharacteristicPageViewModel_WriteType(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.WriteType = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes)Value;
        }
        private object get_156_CharacteristicPageViewModel_UseWindowsNotifications(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.UseWindowsNotifications;
        }
        private void set_156_CharacteristicPageViewModel_UseWindowsNotifications(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            that.UseWindowsNotifications = (global::System.Boolean)Value;
        }
        private object get_157_CharacteristicPageViewModel_DeviceName(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.DeviceName;
        }
        private object get_158_CharacteristicPageViewModel_DisplayPresentError(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel)instance;
            return that.DisplayPresentError;
        }
        private object get_159_DeviceServicesPageViewModel_Device(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel)instance;
            return that.Device;
        }
        private object get_160_DeviceServicesPageViewModel_IsSecureConnectionSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel)instance;
            return that.IsSecureConnectionSupported;
        }
        private object get_161_DeviceServicesPageViewModel_ErrorText(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel)instance;
            return that.ErrorText;
        }
        private object get_162_DeviceServicesPageViewModel_SelectedCharacteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel)instance;
            return that.SelectedCharacteristic;
        }
        private void set_162_DeviceServicesPageViewModel_SelectedCharacteristic(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel)instance;
            that.SelectedCharacteristic = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)Value;
        }
        private object get_163_DiscoverViewModel_Context(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.Context;
        }
        private object get_164_DiscoverViewModel_DeviceList(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.DeviceList;
        }
        private void set_164_DiscoverViewModel_DeviceList(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            that.DeviceList = (global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>)Value;
        }
        private object get_165_ObservableBluetoothLEDevice_BluetoothLEDevice(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.BluetoothLEDevice;
        }
        private object get_166_ObservableBluetoothLEDevice_Glyph(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.Glyph;
        }
        private void set_166_ObservableBluetoothLEDevice_Glyph(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            that.Glyph = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_167_ObservableBluetoothLEDevice_DeviceInfo(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.DeviceInfo;
        }
        private object get_168_ObservableBluetoothLEDevice_IsConnected(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.IsConnected;
        }
        private void set_168_ObservableBluetoothLEDevice_IsConnected(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            that.IsConnected = (global::System.Boolean)Value;
        }
        private object get_169_ObservableBluetoothLEDevice_IsConnectable(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.IsConnectable;
        }
        private object get_170_ObservableBluetoothLEDevice_LastSeenTime(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.LastSeenTime;
        }
        private void set_170_ObservableBluetoothLEDevice_LastSeenTime(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            that.LastSeenTime = (global::System.DateTime)Value;
        }
        private object get_171_ObservableBluetoothLEDevice_IsPaired(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.IsPaired;
        }
        private void set_171_ObservableBluetoothLEDevice_IsPaired(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            that.IsPaired = (global::System.Boolean)Value;
        }
        private object get_172_ObservableBluetoothLEDevice_IsSecureConnection(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.IsSecureConnection;
        }
        private void set_172_ObservableBluetoothLEDevice_IsSecureConnection(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            that.IsSecureConnection = (global::System.Boolean)Value;
        }
        private object get_173_ObservableBluetoothLEDevice_Services(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.Services;
        }
        private object get_174_ObservableGattDeviceService_Service(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            return that.Service;
        }
        private void set_174_ObservableGattDeviceService_Service(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            that.Service = (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService)Value;
        }
        private object get_175_ObservableGattDeviceService_Characteristics(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            return that.Characteristics;
        }
        private void set_175_ObservableGattDeviceService_Characteristics(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            that.Characteristics = (global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics>)Value;
        }
        private object get_176_ObservableGattCharacteristics_Characteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.Characteristic;
        }
        private void set_176_ObservableGattCharacteristics_Characteristic(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.Characteristic = (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic)Value;
        }
        private object get_177_ObservableGattCharacteristics_IsIndicateSet(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.IsIndicateSet;
        }
        private void set_177_ObservableGattCharacteristics_IsIndicateSet(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.IsIndicateSet = (global::System.Boolean)Value;
        }
        private object get_178_ObservableGattCharacteristics_IsNotifySet(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.IsNotifySet;
        }
        private void set_178_ObservableGattCharacteristics_IsNotifySet(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.IsNotifySet = (global::System.Boolean)Value;
        }
        private object get_179_ObservableGattCharacteristics_Parent(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.Parent;
        }
        private void set_179_ObservableGattCharacteristics_Parent(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.Parent = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)Value;
        }
        private object get_180_ObservableGattCharacteristics_Descriptors(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.Descriptors;
        }
        private void set_180_ObservableGattCharacteristics_Descriptors(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.Descriptors = (global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDescriptors>)Value;
        }
        private object get_181_ObservableGattDescriptors_Descriptor(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            return that.Descriptor;
        }
        private void set_181_ObservableGattDescriptors_Descriptor(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            that.Descriptor = (global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor)Value;
        }
        private object get_182_ObservableGattDescriptors_Parent(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            return that.Parent;
        }
        private void set_182_ObservableGattDescriptors_Parent(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            that.Parent = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)Value;
        }
        private object get_183_ObservableGattDescriptors_Name(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            return that.Name;
        }
        private void set_183_ObservableGattDescriptors_Name(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_184_ObservableGattDescriptors_UUID(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            return that.UUID;
        }
        private void set_184_ObservableGattDescriptors_UUID(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            that.UUID = (global::System.String)Value;
        }
        private object get_185_ObservableGattDescriptors_Value(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)instance;
            return that.Value;
        }
        private object get_186_ObservableGattCharacteristics_SelectedDescriptor(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.SelectedDescriptor;
        }
        private void set_186_ObservableGattCharacteristics_SelectedDescriptor(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.SelectedDescriptor = (global::BluetoothLEExplorer.Models.ObservableGattDescriptors)Value;
        }
        private object get_187_ObservableGattCharacteristics_Name(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.Name;
        }
        private void set_187_ObservableGattCharacteristics_Name(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_188_ObservableGattCharacteristics_UUID(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.UUID;
        }
        private void set_188_ObservableGattCharacteristics_UUID(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.UUID = (global::System.String)Value;
        }
        private object get_189_ObservableGattCharacteristics_Value(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.Value;
        }
        private object get_190_ObservableGattCharacteristics_DisplayType(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            return that.DisplayType;
        }
        private void set_190_ObservableGattCharacteristics_DisplayType(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)instance;
            that.DisplayType = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes)Value;
        }
        private object get_191_ObservableGattDeviceService_SelectedCharacteristic(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            return that.SelectedCharacteristic;
        }
        private void set_191_ObservableGattDeviceService_SelectedCharacteristic(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            that.SelectedCharacteristic = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)Value;
        }
        private object get_192_ObservableGattDeviceService_Name(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            return that.Name;
        }
        private void set_192_ObservableGattDeviceService_Name(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_193_ObservableGattDeviceService_UUID(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            return that.UUID;
        }
        private void set_193_ObservableGattDeviceService_UUID(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)instance;
            that.UUID = (global::System.String)Value;
        }
        private object get_194_ObservableBluetoothLEDevice_ServiceCount(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.ServiceCount;
        }
        private void set_194_ObservableBluetoothLEDevice_ServiceCount(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            that.ServiceCount = (global::System.Int32)Value;
        }
        private object get_195_ObservableBluetoothLEDevice_Name(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.Name;
        }
        private object get_196_ObservableBluetoothLEDevice_ErrorText(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.ErrorText;
        }
        private object get_197_ObservableBluetoothLEDevice_RSSI(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.RSSI;
        }
        private object get_198_ObservableBluetoothLEDevice_BatteryLevel(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.BatteryLevel;
        }
        private void set_198_ObservableBluetoothLEDevice_BatteryLevel(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            that.BatteryLevel = (global::System.Int32)Value;
        }
        private object get_199_ObservableBluetoothLEDevice_BluetoothAddressAsString(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.BluetoothAddressAsString;
        }
        private object get_200_ObservableBluetoothLEDevice_BluetoothAddressAsUlong(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)instance;
            return that.BluetoothAddressAsUlong;
        }
        private object get_201_DiscoverViewModel_SelectedDevice(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.SelectedDevice;
        }
        private void set_201_DiscoverViewModel_SelectedDevice(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            that.SelectedDevice = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)Value;
        }
        private object get_202_DiscoverViewModel_IsEnumerating(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.IsEnumerating;
        }
        private object get_203_DiscoverViewModel_EnumerationFinished(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.EnumerationFinished;
        }
        private object get_204_DiscoverViewModel_ContinuousEnumeration(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.ContinuousEnumeration;
        }
        private void set_204_DiscoverViewModel_ContinuousEnumeration(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            that.ContinuousEnumeration = (global::System.Boolean)Value;
        }
        private object get_205_DiscoverViewModel_IsPeripheralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.IsPeripheralRoleSupported;
        }
        private object get_206_DiscoverViewModel_IsCentralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.IsCentralRoleSupported;
        }
        private object get_207_DiscoverViewModel_GridFilter(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            return that.GridFilter;
        }
        private void set_207_DiscoverViewModel_GridFilter(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)instance;
            that.GridFilter = (global::System.String)Value;
        }
        private object get_208_SettingsPageViewModel_SettingsPartViewModel(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.SettingsPageViewModel)instance;
            return that.SettingsPartViewModel;
        }
        private object get_209_SettingsPageViewModel_AboutPartViewModel(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.SettingsPageViewModel)instance;
            return that.AboutPartViewModel;
        }
        private object get_210_ShellViewModel_IsPeripheralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.ShellViewModel)instance;
            return that.IsPeripheralRoleSupported;
        }
        private object get_211_ShellViewModel_IsCentralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.ShellViewModel)instance;
            return that.IsCentralRoleSupported;
        }
        private object get_212_VirtualKeyboardPageViewModel_SubscribedGattClients(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            return that.SubscribedGattClients;
        }
        private object get_213_ObservableGattClient_IsConnected(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattClient)instance;
            return that.IsConnected;
        }
        private object get_214_ObservableGattClient_Name(object instance)
        {
            var that = (global::BluetoothLEExplorer.Models.ObservableGattClient)instance;
            return that.Name;
        }
        private object get_215_VirtualKeyboardPageViewModel_IsPeripheralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            return that.IsPeripheralRoleSupported;
        }
        private object get_216_VirtualKeyboardPageViewModel_IsCentralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            return that.IsCentralRoleSupported;
        }
        private object get_217_VirtualKeyboardPageViewModel_IsSettingUp(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            return that.IsSettingUp;
        }
        private object get_218_VirtualKeyboardPageViewModel_IsKeyboardEnabled(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            return that.IsKeyboardEnabled;
        }
        private void set_218_VirtualKeyboardPageViewModel_IsKeyboardEnabled(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            that.IsKeyboardEnabled = (global::System.Boolean)Value;
        }
        private object get_219_VirtualKeyboardPageViewModel_ErrorText(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            return that.ErrorText;
        }
        private object get_220_VirtualKeyboardPageViewModel_Context(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel)instance;
            return that.Context;
        }
        private object get_221_VirtualPeripheralPageViewModel_AvailableServices(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            return that.AvailableServices;
        }
        private void set_221_VirtualPeripheralPageViewModel_AvailableServices(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            that.AvailableServices = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_222_VirtualPeripheralPageViewModel_NewSelectedService(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            return that.NewSelectedService;
        }
        private void set_222_VirtualPeripheralPageViewModel_NewSelectedService(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            that.NewSelectedService = (global::System.String)Value;
        }
        private object get_223_VirtualPeripheralPageViewModel_SelectedService(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            return that.SelectedService;
        }
        private void set_223_VirtualPeripheralPageViewModel_SelectedService(object instance, object Value)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            that.SelectedService = (global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel)Value;
        }
        private object get_224_VirtualPeripheralPageViewModel_IsPeripheralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            return that.IsPeripheralRoleSupported;
        }
        private object get_225_VirtualPeripheralPageViewModel_IsCentralRoleSupported(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            return that.IsCentralRoleSupported;
        }
        private object get_226_VirtualPeripheralPageViewModel_Context(object instance)
        {
            var that = (global::BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel)instance;
            return that.Context;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember xamlMember = null;
            global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Template10.Common.BootStrapper.SessionState":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.StateItems");
                xamlMember.Getter = get_0_BootStrapper_SessionState;
                xamlMember.Setter = set_0_BootStrapper_SessionState;
                break;
            case "Template10.Common.BootStrapper.NavigationService":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_1_BootStrapper_NavigationService;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.SplashFactory":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SplashFactory", "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>");
                xamlMember.Getter = get_2_BootStrapper_SplashFactory;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CacheMaxDuration":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CacheMaxDuration", "TimeSpan");
                xamlMember.Getter = get_3_BootStrapper_CacheMaxDuration;
                xamlMember.Setter = set_3_BootStrapper_CacheMaxDuration;
                break;
            case "Template10.Common.BootStrapper.ShowShellBackButton":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ShowShellBackButton", "Boolean");
                xamlMember.Getter = get_4_BootStrapper_ShowShellBackButton;
                xamlMember.Setter = set_4_BootStrapper_ShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.ForceShowShellBackButton":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ForceShowShellBackButton", "Boolean");
                xamlMember.Getter = get_5_BootStrapper_ForceShowShellBackButton;
                xamlMember.Setter = set_5_BootStrapper_ForceShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.OriginalActivatedArgs":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "OriginalActivatedArgs", "Windows.ApplicationModel.Activation.IActivatedEventArgs");
                xamlMember.Getter = get_6_BootStrapper_OriginalActivatedArgs;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CurrentState":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CurrentState", "Template10.Common.BootStrapper.States");
                xamlMember.Getter = get_7_BootStrapper_CurrentState;
                xamlMember.Setter = set_7_BootStrapper_CurrentState;
                break;
            case "Template10.Common.BootStrapper.EnableAutoRestoreAfterTerminated":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "EnableAutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                xamlMember.Setter = set_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoRestoreAfterTerminated":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_9_BootStrapper_AutoRestoreAfterTerminated;
                xamlMember.Setter = set_9_BootStrapper_AutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoExtendExecutionSession":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AutoExtendExecutionSession", "Boolean");
                xamlMember.Getter = get_10_BootStrapper_AutoExtendExecutionSession;
                xamlMember.Setter = set_10_BootStrapper_AutoExtendExecutionSession;
                break;
            case "Template10.Common.BootStrapper.AutoSuspendAllFrames":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AutoSuspendAllFrames", "Boolean");
                xamlMember.Getter = get_11_BootStrapper_AutoSuspendAllFrames;
                xamlMember.Setter = set_11_BootStrapper_AutoSuspendAllFrames;
                break;
            case "Template10.Common.BootStrapper.ModalDialog":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ModalDialog", "Template10.Controls.ModalDialog");
                xamlMember.Getter = get_12_BootStrapper_ModalDialog;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalContent":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ModalContent", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_13_BootStrapper_ModalContent;
                xamlMember.Setter = set_13_BootStrapper_ModalContent;
                break;
            case "Windows.UI.Color.A":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_14_Color_A;
                xamlMember.Setter = set_14_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_15_Color_B;
                xamlMember.Setter = set_15_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_16_Color_G;
                xamlMember.Setter = set_16_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_17_Color_R;
                xamlMember.Setter = set_17_Color_R;
                break;
            case "BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl.Value":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_18_GattLocalCharacteristicControl_Value;
                xamlMember.Setter = set_18_GattLocalCharacteristicControl_Value;
                break;
            case "BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl.Characteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Characteristic", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_GattLocalCharacteristicControl_Characteristic;
                xamlMember.Setter = set_19_GattLocalCharacteristicControl_Characteristic;
                break;
            case "BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl.ShowValue":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ShowValue", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_GattLocalCharacteristicControl_ShowValue;
                xamlMember.Setter = set_20_GattLocalCharacteristicControl_ShowValue;
                break;
            case "BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl.IsReadOnly":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_GattLocalCharacteristicControl_IsReadOnly;
                xamlMember.Setter = set_21_GattLocalCharacteristicControl_IsReadOnly;
                break;
            case "Template10.Controls.HamburgerMenu.PrimaryButtons":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PrimaryButtons", "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_HamburgerMenu_PrimaryButtons;
                xamlMember.Setter = set_22_HamburgerMenu_PrimaryButtons;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Content":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_HamburgerButtonInfo_Content;
                xamlMember.Setter = set_23_HamburgerButtonInfo_Content;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ButtonType":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ButtonType", "Template10.Controls.HamburgerButtonInfo.ButtonTypes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_HamburgerButtonInfo_ButtonType;
                xamlMember.Setter = set_24_HamburgerButtonInfo_ButtonType;
                break;
            case "Template10.Controls.HamburgerButtonInfo.NavigationTransitionInfo":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavigationTransitionInfo", "Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_HamburgerButtonInfo_NavigationTransitionInfo;
                xamlMember.Setter = set_25_HamburgerButtonInfo_NavigationTransitionInfo;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Command":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_HamburgerButtonInfo_Command;
                xamlMember.Setter = set_26_HamburgerButtonInfo_Command;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ToolTip":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ToolTip", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_HamburgerButtonInfo_ToolTip;
                xamlMember.Setter = set_27_HamburgerButtonInfo_ToolTip;
                break;
            case "Template10.Controls.HamburgerButtonInfo.CommandParameter":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_HamburgerButtonInfo_CommandParameter;
                xamlMember.Setter = set_28_HamburgerButtonInfo_CommandParameter;
                break;
            case "Template10.Controls.HamburgerButtonInfo.GroupName":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "GroupName", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_HamburgerButtonInfo_GroupName;
                xamlMember.Setter = set_29_HamburgerButtonInfo_GroupName;
                break;
            case "Template10.Controls.HamburgerButtonInfo.PageType":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PageType", "System.Type");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_HamburgerButtonInfo_PageType;
                xamlMember.Setter = set_30_HamburgerButtonInfo_PageType;
                break;
            case "Template10.Controls.HamburgerButtonInfo.PageParameter":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PageParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_HamburgerButtonInfo_PageParameter;
                xamlMember.Setter = set_31_HamburgerButtonInfo_PageParameter;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ClearHistory":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ClearHistory", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_HamburgerButtonInfo_ClearHistory;
                xamlMember.Setter = set_32_HamburgerButtonInfo_ClearHistory;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ClearCache":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ClearCache", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_HamburgerButtonInfo_ClearCache;
                xamlMember.Setter = set_33_HamburgerButtonInfo_ClearCache;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Visibility":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Visibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_HamburgerButtonInfo_Visibility;
                xamlMember.Setter = set_34_HamburgerButtonInfo_Visibility;
                break;
            case "Template10.Controls.HamburgerButtonInfo.IsEnabled":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_HamburgerButtonInfo_IsEnabled;
                xamlMember.Setter = set_35_HamburgerButtonInfo_IsEnabled;
                break;
            case "Template10.Controls.HamburgerButtonInfo.IsChecked":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsChecked", "System.Nullable`1<Boolean>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_HamburgerButtonInfo_IsChecked;
                xamlMember.Setter = set_36_HamburgerButtonInfo_IsChecked;
                break;
            case "Template10.Controls.HamburgerButtonInfo.MaxWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_HamburgerButtonInfo_MaxWidth;
                xamlMember.Setter = set_37_HamburgerButtonInfo_MaxWidth;
                break;
            case "Template10.Controls.HamburgerMenu.PaneBorderThickness":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PaneBorderThickness", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_HamburgerMenu_PaneBorderThickness;
                xamlMember.Setter = set_38_HamburgerMenu_PaneBorderThickness;
                break;
            case "Template10.Controls.HamburgerMenu.SecondarySeparator":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SecondarySeparator", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_HamburgerMenu_SecondarySeparator;
                xamlMember.Setter = set_39_HamburgerMenu_SecondarySeparator;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonBackground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_HamburgerMenu_NavButtonBackground;
                xamlMember.Setter = set_40_HamburgerMenu_NavButtonBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonForeground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_HamburgerMenu_NavButtonForeground;
                xamlMember.Setter = set_41_HamburgerMenu_NavButtonForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavAreaBackground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavAreaBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_HamburgerMenu_NavAreaBackground;
                xamlMember.Setter = set_42_HamburgerMenu_NavAreaBackground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerForeground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "HamburgerForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_HamburgerMenu_HamburgerForeground;
                xamlMember.Setter = set_43_HamburgerMenu_HamburgerForeground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerBackground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "HamburgerBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_HamburgerMenu_HamburgerBackground;
                xamlMember.Setter = set_44_HamburgerMenu_HamburgerBackground;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNarrowMinWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_HamburgerMenu_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_45_HamburgerMenu_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNormalMinWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_HamburgerMenu_VisualStateNormalMinWidth;
                xamlMember.Setter = set_46_HamburgerMenu_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateWideMinWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateWideMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_HamburgerMenu_VisualStateWideMinWidth;
                xamlMember.Setter = set_47_HamburgerMenu_VisualStateWideMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.AccentColor":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AccentColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_HamburgerMenu_AccentColor;
                xamlMember.Setter = set_48_HamburgerMenu_AccentColor;
                break;
            case "Template10.Controls.HamburgerMenu.PaneBorderBrush":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PaneBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_HamburgerMenu_PaneBorderBrush;
                xamlMember.Setter = set_49_HamburgerMenu_PaneBorderBrush;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedForeground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonCheckedForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_HamburgerMenu_NavButtonCheckedForeground;
                xamlMember.Setter = set_50_HamburgerMenu_NavButtonCheckedForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedBackground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonCheckedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_HamburgerMenu_NavButtonCheckedBackground;
                xamlMember.Setter = set_51_HamburgerMenu_NavButtonCheckedBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedIndicatorBrush":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonCheckedIndicatorBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_HamburgerMenu_NavButtonCheckedIndicatorBrush;
                xamlMember.Setter = set_52_HamburgerMenu_NavButtonCheckedIndicatorBrush;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonPressedForeground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonPressedForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_HamburgerMenu_NavButtonPressedForeground;
                xamlMember.Setter = set_53_HamburgerMenu_NavButtonPressedForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonPressedBackground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonPressedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_HamburgerMenu_NavButtonPressedBackground;
                xamlMember.Setter = set_54_HamburgerMenu_NavButtonPressedBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonHoverForeground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonHoverForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_HamburgerMenu_NavButtonHoverForeground;
                xamlMember.Setter = set_55_HamburgerMenu_NavButtonHoverForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonHoverBackground":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavButtonHoverBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_HamburgerMenu_NavButtonHoverBackground;
                xamlMember.Setter = set_56_HamburgerMenu_NavButtonHoverBackground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerButtonVisibility":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "HamburgerButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_HamburgerMenu_HamburgerButtonVisibility;
                xamlMember.Setter = set_57_HamburgerMenu_HamburgerButtonVisibility;
                break;
            case "Template10.Controls.HamburgerMenu.DisplayMode":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "DisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_HamburgerMenu_DisplayMode;
                xamlMember.Setter = set_58_HamburgerMenu_DisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNarrowDisplayMode":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateNarrowDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_HamburgerMenu_VisualStateNarrowDisplayMode;
                xamlMember.Setter = set_59_HamburgerMenu_VisualStateNarrowDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNormalDisplayMode":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateNormalDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_HamburgerMenu_VisualStateNormalDisplayMode;
                xamlMember.Setter = set_60_HamburgerMenu_VisualStateNormalDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateWideDisplayMode":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateWideDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_HamburgerMenu_VisualStateWideDisplayMode;
                xamlMember.Setter = set_61_HamburgerMenu_VisualStateWideDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.SecondaryButtonOrientation":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SecondaryButtonOrientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_HamburgerMenu_SecondaryButtonOrientation;
                xamlMember.Setter = set_62_HamburgerMenu_SecondaryButtonOrientation;
                break;
            case "Template10.Controls.HamburgerMenu.Selected":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Selected", "Template10.Controls.HamburgerButtonInfo");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_HamburgerMenu_Selected;
                xamlMember.Setter = set_63_HamburgerMenu_Selected;
                break;
            case "Template10.Controls.HamburgerMenu.NavigationService":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_HamburgerMenu_NavigationService;
                xamlMember.Setter = set_64_HamburgerMenu_NavigationService;
                break;
            case "Template10.Controls.HamburgerMenu.IsFullScreen":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsFullScreen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_HamburgerMenu_IsFullScreen;
                xamlMember.Setter = set_65_HamburgerMenu_IsFullScreen;
                break;
            case "Template10.Controls.HamburgerMenu.PaneWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PaneWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_HamburgerMenu_PaneWidth;
                xamlMember.Setter = set_66_HamburgerMenu_PaneWidth;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerButtonGridWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "HamburgerButtonGridWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_HamburgerMenu_HamburgerButtonGridWidth;
                xamlMember.Setter = set_67_HamburgerMenu_HamburgerButtonGridWidth;
                break;
            case "Template10.Controls.HamburgerMenu.OpenCloseMode":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "OpenCloseMode", "Template10.Controls.HamburgerMenu.OpenCloseModes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_HamburgerMenu_OpenCloseMode;
                xamlMember.Setter = set_68_HamburgerMenu_OpenCloseMode;
                break;
            case "Template10.Controls.HamburgerMenu.HeaderContent":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "HeaderContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_HamburgerMenu_HeaderContent;
                xamlMember.Setter = set_69_HamburgerMenu_HeaderContent;
                break;
            case "Template10.Controls.HamburgerMenu.IsOpen":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_HamburgerMenu_IsOpen;
                xamlMember.Setter = set_70_HamburgerMenu_IsOpen;
                break;
            case "Template10.Controls.HamburgerMenu.SecondaryButtons":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SecondaryButtons", "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_HamburgerMenu_SecondaryButtons;
                xamlMember.Setter = set_71_HamburgerMenu_SecondaryButtons;
                break;
            case "Template10.Controls.HamburgerMenu.NavCommand":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavCommand", "Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.Getter = get_72_HamburgerMenu_NavCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Controls.HamburgerMenu.PropertyChangedHandlers":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PropertyChangedHandlers", "Object");
                xamlMember.Getter = get_73_HamburgerMenu_PropertyChangedHandlers;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Controls.PageHeader.VisualStateNarrowMinWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_PageHeader_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_74_PageHeader_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.PageHeader.VisualStateNormalMinWidth":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_PageHeader_VisualStateNormalMinWidth;
                xamlMember.Setter = set_75_PageHeader_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.PageHeader.EllipsisVisibility":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "EllipsisVisibility", "Template10.Behaviors.EllipsisBehavior.Visibilities");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_PageHeader_EllipsisVisibility;
                xamlMember.Setter = set_76_PageHeader_EllipsisVisibility;
                break;
            case "Template10.Controls.PageHeader.PrimaryCommandsVisibility":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "PrimaryCommandsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_PageHeader_PrimaryCommandsVisibility;
                xamlMember.Setter = set_77_PageHeader_PrimaryCommandsVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonVisibility":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BackButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_PageHeader_BackButtonVisibility;
                xamlMember.Setter = set_78_PageHeader_BackButtonVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonContent":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BackButtonContent", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_PageHeader_BackButtonContent;
                xamlMember.Setter = set_79_PageHeader_BackButtonContent;
                break;
            case "Template10.Controls.PageHeader.Frame":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_PageHeader_Frame;
                xamlMember.Setter = set_80_PageHeader_Frame;
                break;
            case "Template10.Controls.PageHeader.EnableHamburgerMenuAutoLayout":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "EnableHamburgerMenuAutoLayout", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_PageHeader_EnableHamburgerMenuAutoLayout;
                xamlMember.Setter = set_81_PageHeader_EnableHamburgerMenuAutoLayout;
                break;
            case "Template10.Controls.PageHeader.Text":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_PageHeader_Text;
                xamlMember.Setter = set_82_PageHeader_Text;
                break;
            case "Template10.Controls.Resizer.ElementControl":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ElementControl", "Windows.UI.Xaml.Controls.Control");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_Resizer_ElementControl;
                xamlMember.Setter = set_83_Resizer_ElementControl;
                break;
            case "Template10.Controls.Resizer.GrabberBrush":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "GrabberBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_Resizer_GrabberBrush;
                xamlMember.Setter = set_84_Resizer_GrabberBrush;
                break;
            case "Template10.Controls.Resizer.GrabberVisibility":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "GrabberVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_Resizer_GrabberVisibility;
                xamlMember.Setter = set_85_Resizer_GrabberVisibility;
                break;
            case "Template10.Controls.Resizer.GrabberSize":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "GrabberSize", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_Resizer_GrabberSize;
                xamlMember.Setter = set_86_Resizer_GrabberSize;
                break;
            case "BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel.ServiceVM":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ServiceVM", "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel");
                xamlMember.Getter = get_87_AlertNotificationServicePageViewModel_ServiceVM;
                xamlMember.Setter = set_87_AlertNotificationServicePageViewModel_ServiceVM;
                break;
            case "BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel.Service":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Service", "GattServicesLibrary.Services.AlertNotificationService");
                xamlMember.Getter = get_88_AlertNotificationServicePageViewModel_Service;
                xamlMember.Setter = set_88_AlertNotificationServicePageViewModel_Service;
                break;
            case "BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel.NewAlert":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NewAlert", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_89_AlertNotificationServicePageViewModel_NewAlert;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel.UnreadAlertStatus":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "UnreadAlertStatus", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_90_AlertNotificationServicePageViewModel_UnreadAlertStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel.AlertNotificationControlPoint":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.AlertNotificationServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AlertNotificationControlPoint", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_91_AlertNotificationServicePageViewModel_AlertNotificationControlPoint;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Mvvm.ViewModelBase.NavigationService":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_92_ViewModelBase_NavigationService;
                xamlMember.Setter = set_92_ViewModelBase_NavigationService;
                break;
            case "Template10.Mvvm.ViewModelBase.Dispatcher":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Dispatcher", "Template10.Common.IDispatcherWrapper");
                xamlMember.Getter = get_93_ViewModelBase_Dispatcher;
                xamlMember.Setter = set_93_ViewModelBase_Dispatcher;
                break;
            case "Template10.Mvvm.ViewModelBase.SessionState":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.IStateItems");
                xamlMember.Getter = get_94_ViewModelBase_SessionState;
                xamlMember.Setter = set_94_ViewModelBase_SessionState;
                break;
            case "BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel.ServiceVM":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ServiceVM", "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel");
                xamlMember.Getter = get_95_BloodPressureServicePageViewModel_ServiceVM;
                xamlMember.Setter = set_95_BloodPressureServicePageViewModel_ServiceVM;
                break;
            case "BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel.Service":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Service", "GattServicesLibrary.Services.BloodPressureService");
                xamlMember.Getter = get_96_BloodPressureServicePageViewModel_Service;
                xamlMember.Setter = set_96_BloodPressureServicePageViewModel_Service;
                break;
            case "BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel.BloodPressureMeasurement":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BloodPressureMeasurement", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_97_BloodPressureServicePageViewModel_BloodPressureMeasurement;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel.BloodPressureFeature":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.BloodPressureServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BloodPressureFeature", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_98_BloodPressureServicePageViewModel_BloodPressureFeature;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Converters.ValueWhenConverter.When":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "When", "Object");
                xamlMember.Getter = get_99_ValueWhenConverter_When;
                xamlMember.Setter = set_99_ValueWhenConverter_When;
                break;
            case "Template10.Converters.ValueWhenConverter.Value":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.Getter = get_100_ValueWhenConverter_Value;
                xamlMember.Setter = set_100_ValueWhenConverter_Value;
                break;
            case "Template10.Converters.ValueWhenConverter.Otherwise":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Otherwise", "Object");
                xamlMember.Getter = get_101_ValueWhenConverter_Otherwise;
                xamlMember.Setter = set_101_ValueWhenConverter_Otherwise;
                break;
            case "Template10.Converters.ValueWhenConverter.OtherwiseValueBack":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "OtherwiseValueBack", "Object");
                xamlMember.Getter = get_102_ValueWhenConverter_OtherwiseValueBack;
                xamlMember.Setter = set_102_ValueWhenConverter_OtherwiseValueBack;
                break;
            case "Template10.Converters.ValueWhenConverter.Debug":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Debug", "Boolean");
                xamlMember.Getter = get_103_ValueWhenConverter_Debug;
                xamlMember.Setter = set_103_ValueWhenConverter_Debug;
                break;
            case "BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel.ServiceVM":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ServiceVM", "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel");
                xamlMember.Getter = get_104_CurrentTimeServicePageViewModel_ServiceVM;
                xamlMember.Setter = set_104_CurrentTimeServicePageViewModel_ServiceVM;
                break;
            case "BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel.Service":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Service", "GattServicesLibrary.Services.CurrentTimeService");
                xamlMember.Getter = get_105_CurrentTimeServicePageViewModel_Service;
                xamlMember.Setter = set_105_CurrentTimeServicePageViewModel_Service;
                break;
            case "BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel.CurrentTime":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CurrentTime", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_106_CurrentTimeServicePageViewModel_CurrentTime;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel.UnreadAlertStatus":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CurrentTimeServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "UnreadAlertStatus", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_107_CurrentTimeServicePageViewModel_UnreadAlertStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel.ServiceVM":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ServiceVM", "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel");
                xamlMember.Getter = get_108_HeartRateServicePageViewModel_ServiceVM;
                xamlMember.Setter = set_108_HeartRateServicePageViewModel_ServiceVM;
                break;
            case "BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel.Service":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Service", "GattServicesLibrary.Services.HeartRateService");
                xamlMember.Getter = get_109_HeartRateServicePageViewModel_Service;
                xamlMember.Setter = set_109_HeartRateServicePageViewModel_Service;
                break;
            case "BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel.HeartRateMeasurement":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "HeartRateMeasurement", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_110_HeartRateServicePageViewModel_HeartRateMeasurement;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel.ServiceVM":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ServiceVM", "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel");
                xamlMember.Getter = get_111_MicrosoftServicePageViewModel_ServiceVM;
                xamlMember.Setter = set_111_MicrosoftServicePageViewModel_ServiceVM;
                break;
            case "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel.Service":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Service", "GattServicesLibrary.Services.MicrosoftService");
                xamlMember.Getter = get_112_MicrosoftServicePageViewModel_Service;
                xamlMember.Setter = set_112_MicrosoftServicePageViewModel_Service;
                break;
            case "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel.ReadCharacteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ReadCharacteristic", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_113_MicrosoftServicePageViewModel_ReadCharacteristic;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel.WriteCharacteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "WriteCharacteristic", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_114_MicrosoftServicePageViewModel_WriteCharacteristic;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel.NotifyCharacteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NotifyCharacteristic", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_115_MicrosoftServicePageViewModel_NotifyCharacteristic;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel.IndicateCharacteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IndicateCharacteristic", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_116_MicrosoftServicePageViewModel_IndicateCharacteristic;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel.ReadLongCharacteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.MicrosoftServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ReadLongCharacteristic", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_117_MicrosoftServicePageViewModel_ReadLongCharacteristic;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel.ServiceVM":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ServiceVM", "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel");
                xamlMember.Getter = get_118_BatteryServicePageViewModel_ServiceVM;
                xamlMember.Setter = set_118_BatteryServicePageViewModel_ServiceVM;
                break;
            case "BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel.Service":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Service", "GattServicesLibrary.Services.BatteryService");
                xamlMember.Getter = get_119_BatteryServicePageViewModel_Service;
                xamlMember.Setter = set_119_BatteryServicePageViewModel_Service;
                break;
            case "BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel.BatteryLevel":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.BatteryServicePageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BatteryLevel", "BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel");
                xamlMember.Getter = get_120_BatteryServicePageViewModel_BatteryLevel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_121_Interaction_Behaviors;
                xamlMember.Setter = set_121_Interaction_Behaviors;
                break;
            case "Template10.Behaviors.KeyBehavior.Actions":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_KeyBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Behaviors.KeyBehavior.Key":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Key", "Windows.System.VirtualKey");
                xamlMember.Getter = get_123_KeyBehavior_Key;
                xamlMember.Setter = set_123_KeyBehavior_Key;
                break;
            case "Template10.Behaviors.KeyBehavior.AssociatedObject":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_124_KeyBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Behaviors.KeyBehavior.AndControl":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AndControl", "Boolean");
                xamlMember.Getter = get_125_KeyBehavior_AndControl;
                xamlMember.Setter = set_125_KeyBehavior_AndControl;
                break;
            case "Template10.Behaviors.KeyBehavior.AndAlt":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AndAlt", "Boolean");
                xamlMember.Getter = get_126_KeyBehavior_AndAlt;
                xamlMember.Setter = set_126_KeyBehavior_AndAlt;
                break;
            case "Template10.Behaviors.KeyBehavior.AndShift":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AndShift", "Boolean");
                xamlMember.Getter = get_127_KeyBehavior_AndShift;
                xamlMember.Setter = set_127_KeyBehavior_AndShift;
                break;
            case "Template10.Behaviors.KeyBehavior.Event":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Event", "Template10.Behaviors.KeyBehavior.Kinds");
                xamlMember.Getter = get_128_KeyBehavior_Event;
                xamlMember.Setter = set_128_KeyBehavior_Event;
                break;
            case "Microsoft.Xaml.Interactivity.Trigger.Actions":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_Trigger_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_130_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_131_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior.AssociatedObject":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_132_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Behaviors.FocusAction.TargetObject":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.FocusAction");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "TargetObject", "Windows.UI.Xaml.Controls.Control");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_FocusAction_TargetObject;
                xamlMember.Setter = set_133_FocusAction_TargetObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.CallMethodAction.MethodName":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.CallMethodAction");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "MethodName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_CallMethodAction_MethodName;
                xamlMember.Setter = set_134_CallMethodAction_MethodName;
                break;
            case "Microsoft.Xaml.Interactions.Core.CallMethodAction.TargetObject":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.CallMethodAction");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "TargetObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_CallMethodAction_TargetObject;
                xamlMember.Setter = set_135_CallMethodAction_TargetObject;
                break;
            case "BluetoothLEExplorer.Views.Busy.BusyText":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Views.Busy");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BusyText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_Busy_BusyText;
                xamlMember.Setter = set_136_Busy_BusyText;
                break;
            case "BluetoothLEExplorer.Views.Busy.IsBusy":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Views.Busy");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_Busy_IsBusy;
                xamlMember.Setter = set_137_Busy_IsBusy;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.NotifyUser":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NotifyUser", "System.Collections.ObjectModel.ObservableCollection`1<String>");
                xamlMember.Getter = get_138_CharacteristicPageViewModel_NotifyUser;
                xamlMember.Setter = set_138_CharacteristicPageViewModel_NotifyUser;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.Characteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Characteristic", "BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember.Getter = get_139_CharacteristicPageViewModel_Characteristic;
                xamlMember.Setter = set_139_CharacteristicPageViewModel_Characteristic;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.SelectedDescriptor":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SelectedDescriptor", "BluetoothLEExplorer.Models.ObservableGattDescriptors");
                xamlMember.Getter = get_140_CharacteristicPageViewModel_SelectedDescriptor;
                xamlMember.Setter = set_140_CharacteristicPageViewModel_SelectedDescriptor;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.Properties":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Properties", "String");
                xamlMember.Getter = get_141_CharacteristicPageViewModel_Properties;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.Notify":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Notify", "Boolean");
                xamlMember.Getter = get_142_CharacteristicPageViewModel_Notify;
                xamlMember.Setter = set_142_CharacteristicPageViewModel_Notify;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.NotifyProgress":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NotifyProgress", "Boolean");
                xamlMember.Getter = get_143_CharacteristicPageViewModel_NotifyProgress;
                xamlMember.Setter = set_143_CharacteristicPageViewModel_NotifyProgress;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.NotifyError":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NotifyError", "Boolean");
                xamlMember.Getter = get_144_CharacteristicPageViewModel_NotifyError;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.Indicate":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Indicate", "Boolean");
                xamlMember.Getter = get_145_CharacteristicPageViewModel_Indicate;
                xamlMember.Setter = set_145_CharacteristicPageViewModel_Indicate;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.IndicateProgress":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IndicateProgress", "Boolean");
                xamlMember.Getter = get_146_CharacteristicPageViewModel_IndicateProgress;
                xamlMember.Setter = set_146_CharacteristicPageViewModel_IndicateProgress;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.IndicateError":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IndicateError", "Boolean");
                xamlMember.Getter = get_147_CharacteristicPageViewModel_IndicateError;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.CharacteristicCanBeRead":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CharacteristicCanBeRead", "Boolean");
                xamlMember.Getter = get_148_CharacteristicPageViewModel_CharacteristicCanBeRead;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.CharacteristicCanWrite":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CharacteristicCanWrite", "Boolean");
                xamlMember.Getter = get_149_CharacteristicPageViewModel_CharacteristicCanWrite;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.CharacteristicCanNotify":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CharacteristicCanNotify", "Boolean");
                xamlMember.Getter = get_150_CharacteristicPageViewModel_CharacteristicCanNotify;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.CharacteristicCanIndicate":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CharacteristicCanIndicate", "Boolean");
                xamlMember.Getter = get_151_CharacteristicPageViewModel_CharacteristicCanIndicate;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.CharacteristicCanNotifyOrIndicate":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CharacteristicCanNotifyOrIndicate", "Boolean");
                xamlMember.Getter = get_152_CharacteristicPageViewModel_CharacteristicCanNotifyOrIndicate;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.CharacteristicValueVisible":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "CharacteristicValueVisible", "Boolean");
                xamlMember.Getter = get_153_CharacteristicPageViewModel_CharacteristicValueVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.ValueToWrite":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ValueToWrite", "String");
                xamlMember.Getter = get_154_CharacteristicPageViewModel_ValueToWrite;
                xamlMember.Setter = set_154_CharacteristicPageViewModel_ValueToWrite;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteType":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "WriteType", "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.WriteTypes");
                xamlMember.Getter = get_155_CharacteristicPageViewModel_WriteType;
                xamlMember.Setter = set_155_CharacteristicPageViewModel_WriteType;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.UseWindowsNotifications":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "UseWindowsNotifications", "Boolean");
                xamlMember.Getter = get_156_CharacteristicPageViewModel_UseWindowsNotifications;
                xamlMember.Setter = set_156_CharacteristicPageViewModel_UseWindowsNotifications;
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.DeviceName":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "DeviceName", "String");
                xamlMember.Getter = get_157_CharacteristicPageViewModel_DeviceName;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel.DisplayPresentError":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.CharacteristicPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "DisplayPresentError", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_158_CharacteristicPageViewModel_DisplayPresentError;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel.Device":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Device", "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember.Getter = get_159_DeviceServicesPageViewModel_Device;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel.IsSecureConnectionSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsSecureConnectionSupported", "Boolean");
                xamlMember.Getter = get_160_DeviceServicesPageViewModel_IsSecureConnectionSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel.ErrorText":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ErrorText", "String");
                xamlMember.Getter = get_161_DeviceServicesPageViewModel_ErrorText;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel.SelectedCharacteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SelectedCharacteristic", "BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember.Getter = get_162_DeviceServicesPageViewModel_SelectedCharacteristic;
                xamlMember.Setter = set_162_DeviceServicesPageViewModel_SelectedCharacteristic;
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.Context":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Context", "BluetoothLEExplorer.Models.GattSampleContext");
                xamlMember.Getter = get_163_DiscoverViewModel_Context;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.DeviceList":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "DeviceList", "SortedObservableCollection.SortedObservableCollection`1<BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>");
                xamlMember.Getter = get_164_DiscoverViewModel_DeviceList;
                xamlMember.Setter = set_164_DiscoverViewModel_DeviceList;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.BluetoothLEDevice":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BluetoothLEDevice", "Windows.Devices.Bluetooth.BluetoothLEDevice");
                xamlMember.Getter = get_165_ObservableBluetoothLEDevice_BluetoothLEDevice;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.Glyph":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Glyph", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_166_ObservableBluetoothLEDevice_Glyph;
                xamlMember.Setter = set_166_ObservableBluetoothLEDevice_Glyph;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.DeviceInfo":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "DeviceInfo", "Windows.Devices.Enumeration.DeviceInformation");
                xamlMember.Getter = get_167_ObservableBluetoothLEDevice_DeviceInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.IsConnected":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsConnected", "Boolean");
                xamlMember.Getter = get_168_ObservableBluetoothLEDevice_IsConnected;
                xamlMember.Setter = set_168_ObservableBluetoothLEDevice_IsConnected;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.IsConnectable":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsConnectable", "Boolean");
                xamlMember.Getter = get_169_ObservableBluetoothLEDevice_IsConnectable;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.LastSeenTime":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "LastSeenTime", "System.DateTime");
                xamlMember.Getter = get_170_ObservableBluetoothLEDevice_LastSeenTime;
                xamlMember.Setter = set_170_ObservableBluetoothLEDevice_LastSeenTime;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.IsPaired":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsPaired", "Boolean");
                xamlMember.Getter = get_171_ObservableBluetoothLEDevice_IsPaired;
                xamlMember.Setter = set_171_ObservableBluetoothLEDevice_IsPaired;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.IsSecureConnection":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsSecureConnection", "Boolean");
                xamlMember.Getter = get_172_ObservableBluetoothLEDevice_IsSecureConnection;
                xamlMember.Setter = set_172_ObservableBluetoothLEDevice_IsSecureConnection;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.Services":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Services", "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattDeviceService>");
                xamlMember.Getter = get_173_ObservableBluetoothLEDevice_Services;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDeviceService.Service":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDeviceService");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Service", "Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
                xamlMember.Getter = get_174_ObservableGattDeviceService_Service;
                xamlMember.Setter = set_174_ObservableGattDeviceService_Service;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDeviceService.Characteristics":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDeviceService");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Characteristics", "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattCharacteristics>");
                xamlMember.Getter = get_175_ObservableGattDeviceService_Characteristics;
                xamlMember.Setter = set_175_ObservableGattDeviceService_Characteristics;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.Characteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Characteristic", "Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic");
                xamlMember.Getter = get_176_ObservableGattCharacteristics_Characteristic;
                xamlMember.Setter = set_176_ObservableGattCharacteristics_Characteristic;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.IsIndicateSet":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsIndicateSet", "Boolean");
                xamlMember.Getter = get_177_ObservableGattCharacteristics_IsIndicateSet;
                xamlMember.Setter = set_177_ObservableGattCharacteristics_IsIndicateSet;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.IsNotifySet":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsNotifySet", "Boolean");
                xamlMember.Getter = get_178_ObservableGattCharacteristics_IsNotifySet;
                xamlMember.Setter = set_178_ObservableGattCharacteristics_IsNotifySet;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.Parent":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Parent", "BluetoothLEExplorer.Models.ObservableGattDeviceService");
                xamlMember.Getter = get_179_ObservableGattCharacteristics_Parent;
                xamlMember.Setter = set_179_ObservableGattCharacteristics_Parent;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.Descriptors":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Descriptors", "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattDescriptors>");
                xamlMember.Getter = get_180_ObservableGattCharacteristics_Descriptors;
                xamlMember.Setter = set_180_ObservableGattCharacteristics_Descriptors;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDescriptors.Descriptor":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDescriptors");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Descriptor", "Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor");
                xamlMember.Getter = get_181_ObservableGattDescriptors_Descriptor;
                xamlMember.Setter = set_181_ObservableGattDescriptors_Descriptor;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDescriptors.Parent":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDescriptors");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Parent", "BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember.Getter = get_182_ObservableGattDescriptors_Parent;
                xamlMember.Setter = set_182_ObservableGattDescriptors_Parent;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDescriptors.Name":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDescriptors");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_183_ObservableGattDescriptors_Name;
                xamlMember.Setter = set_183_ObservableGattDescriptors_Name;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDescriptors.UUID":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDescriptors");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "UUID", "String");
                xamlMember.Getter = get_184_ObservableGattDescriptors_UUID;
                xamlMember.Setter = set_184_ObservableGattDescriptors_UUID;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDescriptors.Value":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDescriptors");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_185_ObservableGattDescriptors_Value;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.SelectedDescriptor":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SelectedDescriptor", "BluetoothLEExplorer.Models.ObservableGattDescriptors");
                xamlMember.Getter = get_186_ObservableGattCharacteristics_SelectedDescriptor;
                xamlMember.Setter = set_186_ObservableGattCharacteristics_SelectedDescriptor;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.Name":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_187_ObservableGattCharacteristics_Name;
                xamlMember.Setter = set_187_ObservableGattCharacteristics_Name;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.UUID":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "UUID", "String");
                xamlMember.Getter = get_188_ObservableGattCharacteristics_UUID;
                xamlMember.Setter = set_188_ObservableGattCharacteristics_UUID;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.Value":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_189_ObservableGattCharacteristics_Value;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayType":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "DisplayType", "BluetoothLEExplorer.Models.ObservableGattCharacteristics.DisplayTypes");
                xamlMember.Getter = get_190_ObservableGattCharacteristics_DisplayType;
                xamlMember.Setter = set_190_ObservableGattCharacteristics_DisplayType;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDeviceService.SelectedCharacteristic":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDeviceService");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SelectedCharacteristic", "BluetoothLEExplorer.Models.ObservableGattCharacteristics");
                xamlMember.Getter = get_191_ObservableGattDeviceService_SelectedCharacteristic;
                xamlMember.Setter = set_191_ObservableGattDeviceService_SelectedCharacteristic;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDeviceService.Name":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDeviceService");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_192_ObservableGattDeviceService_Name;
                xamlMember.Setter = set_192_ObservableGattDeviceService_Name;
                break;
            case "BluetoothLEExplorer.Models.ObservableGattDeviceService.UUID":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattDeviceService");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "UUID", "String");
                xamlMember.Getter = get_193_ObservableGattDeviceService_UUID;
                xamlMember.Setter = set_193_ObservableGattDeviceService_UUID;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.ServiceCount":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ServiceCount", "Int32");
                xamlMember.Getter = get_194_ObservableBluetoothLEDevice_ServiceCount;
                xamlMember.Setter = set_194_ObservableBluetoothLEDevice_ServiceCount;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.Name":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_195_ObservableBluetoothLEDevice_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.ErrorText":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ErrorText", "String");
                xamlMember.Getter = get_196_ObservableBluetoothLEDevice_ErrorText;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.RSSI":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "RSSI", "Int32");
                xamlMember.Getter = get_197_ObservableBluetoothLEDevice_RSSI;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.BatteryLevel":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BatteryLevel", "Int32");
                xamlMember.Getter = get_198_ObservableBluetoothLEDevice_BatteryLevel;
                xamlMember.Setter = set_198_ObservableBluetoothLEDevice_BatteryLevel;
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.BluetoothAddressAsString":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BluetoothAddressAsString", "String");
                xamlMember.Getter = get_199_ObservableBluetoothLEDevice_BluetoothAddressAsString;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice.BluetoothAddressAsUlong":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "BluetoothAddressAsUlong", "UInt64");
                xamlMember.Getter = get_200_ObservableBluetoothLEDevice_BluetoothAddressAsUlong;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.SelectedDevice":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SelectedDevice", "BluetoothLEExplorer.Models.ObservableBluetoothLEDevice");
                xamlMember.Getter = get_201_DiscoverViewModel_SelectedDevice;
                xamlMember.Setter = set_201_DiscoverViewModel_SelectedDevice;
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.IsEnumerating":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsEnumerating", "Boolean");
                xamlMember.Getter = get_202_DiscoverViewModel_IsEnumerating;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.EnumerationFinished":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "EnumerationFinished", "Boolean");
                xamlMember.Getter = get_203_DiscoverViewModel_EnumerationFinished;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.ContinuousEnumeration":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ContinuousEnumeration", "Boolean");
                xamlMember.Getter = get_204_DiscoverViewModel_ContinuousEnumeration;
                xamlMember.Setter = set_204_DiscoverViewModel_ContinuousEnumeration;
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.IsPeripheralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsPeripheralRoleSupported", "Boolean");
                xamlMember.Getter = get_205_DiscoverViewModel_IsPeripheralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.IsCentralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsCentralRoleSupported", "Boolean");
                xamlMember.Getter = get_206_DiscoverViewModel_IsCentralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.DiscoverViewModel.GridFilter":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.DiscoverViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "GridFilter", "String");
                xamlMember.Getter = get_207_DiscoverViewModel_GridFilter;
                xamlMember.Setter = set_207_DiscoverViewModel_GridFilter;
                break;
            case "BluetoothLEExplorer.ViewModels.SettingsPageViewModel.SettingsPartViewModel":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.SettingsPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SettingsPartViewModel", "BluetoothLEExplorer.ViewModels.SettingsPartViewModel");
                xamlMember.Getter = get_208_SettingsPageViewModel_SettingsPartViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.SettingsPageViewModel.AboutPartViewModel":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.SettingsPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AboutPartViewModel", "BluetoothLEExplorer.ViewModels.AboutPartViewModel");
                xamlMember.Getter = get_209_SettingsPageViewModel_AboutPartViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.ShellViewModel.IsPeripheralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.ShellViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsPeripheralRoleSupported", "Boolean");
                xamlMember.Getter = get_210_ShellViewModel_IsPeripheralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.ShellViewModel.IsCentralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.ShellViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsCentralRoleSupported", "Boolean");
                xamlMember.Getter = get_211_ShellViewModel_IsCentralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel.SubscribedGattClients":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SubscribedGattClients", "System.Collections.ObjectModel.ObservableCollection`1<BluetoothLEExplorer.Models.ObservableGattClient>");
                xamlMember.Getter = get_212_VirtualKeyboardPageViewModel_SubscribedGattClients;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableGattClient.IsConnected":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattClient");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsConnected", "Boolean");
                xamlMember.Getter = get_213_ObservableGattClient_IsConnected;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.Models.ObservableGattClient.Name":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.Models.ObservableGattClient");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_214_ObservableGattClient_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel.IsPeripheralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsPeripheralRoleSupported", "Boolean");
                xamlMember.Getter = get_215_VirtualKeyboardPageViewModel_IsPeripheralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel.IsCentralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsCentralRoleSupported", "Boolean");
                xamlMember.Getter = get_216_VirtualKeyboardPageViewModel_IsCentralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel.IsSettingUp":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsSettingUp", "Boolean");
                xamlMember.Getter = get_217_VirtualKeyboardPageViewModel_IsSettingUp;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel.IsKeyboardEnabled":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsKeyboardEnabled", "Boolean");
                xamlMember.Getter = get_218_VirtualKeyboardPageViewModel_IsKeyboardEnabled;
                xamlMember.Setter = set_218_VirtualKeyboardPageViewModel_IsKeyboardEnabled;
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel.ErrorText":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "ErrorText", "String");
                xamlMember.Getter = get_219_VirtualKeyboardPageViewModel_ErrorText;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel.Context":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualKeyboardPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Context", "BluetoothLEExplorer.Models.GattSampleContext");
                xamlMember.Getter = get_220_VirtualKeyboardPageViewModel_Context;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel.AvailableServices":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "AvailableServices", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_221_VirtualPeripheralPageViewModel_AvailableServices;
                xamlMember.Setter = set_221_VirtualPeripheralPageViewModel_AvailableServices;
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel.NewSelectedService":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "NewSelectedService", "String");
                xamlMember.Getter = get_222_VirtualPeripheralPageViewModel_NewSelectedService;
                xamlMember.Setter = set_222_VirtualPeripheralPageViewModel_NewSelectedService;
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel.SelectedService":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "SelectedService", "BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel");
                xamlMember.Getter = get_223_VirtualPeripheralPageViewModel_SelectedService;
                xamlMember.Setter = set_223_VirtualPeripheralPageViewModel_SelectedService;
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel.IsPeripheralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsPeripheralRoleSupported", "Boolean");
                xamlMember.Getter = get_224_VirtualPeripheralPageViewModel_IsPeripheralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel.IsCentralRoleSupported":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "IsCentralRoleSupported", "Boolean");
                xamlMember.Getter = get_225_VirtualPeripheralPageViewModel_IsCentralRoleSupported;
                xamlMember.SetIsReadOnly();
                break;
            case "BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel.Context":
                userType = (global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BluetoothLEExplorer.ViewModels.VirtualPeripheralPageViewModel");
                xamlMember = new global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlMember(this, "Context", "BluetoothLEExplorer.Models.GattSampleContext");
                xamlMember.Getter = get_226_VirtualPeripheralPageViewModel_Context;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlSystemBaseType
        , global::Windows.UI.Xaml.Markup.IXamlType2
    {
        global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;
        global::Windows.UI.Xaml.Markup.IXamlType _boxedType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        public global::Windows.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Windows.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::BluetoothLEExplorer.BluetoothLEExplorer_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

