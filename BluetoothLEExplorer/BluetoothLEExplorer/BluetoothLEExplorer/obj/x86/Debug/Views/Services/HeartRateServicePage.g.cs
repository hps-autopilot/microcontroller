#pragma checksum "C:\Users\tilt7\Documents\GitHub\microcontroller\BluetoothLEExplorer\BluetoothLEExplorer\BluetoothLEExplorer\Views\Services\HeartRateServicePage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "46DB5CCBAE12F1BF573AED530C81E9B3"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BluetoothLEExplorer.Views
{
    partial class HeartRateServicePage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Template10_Controls_PageHeader_Text(global::Template10.Controls.PageHeader obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj, global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel), targetNullValue);
                }
                obj.Characteristic = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class HeartRateServicePage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IHeartRateServicePage_Bindings
        {
            private global::BluetoothLEExplorer.Views.HeartRateServicePage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Template10.Controls.PageHeader obj8;
            private global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl obj9;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj10;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj11;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj12;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj13;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj11Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj12Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj13Click;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj8TextDisabled = false;
            private static bool isobj9CharacteristicDisabled = false;
            private static bool isobj10IsOnDisabled = false;

            private HeartRateServicePage_obj1_BindingsTracking bindingsTracking;

            public HeartRateServicePage_obj1_Bindings()
            {
                this.bindingsTracking = new HeartRateServicePage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 92 && columnNumber == 69)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 108 && columnNumber == 60)
                {
                    isobj9CharacteristicDisabled = true;
                }
                else if (lineNumber == 106 && columnNumber == 31)
                {
                    isobj10IsOnDisabled = true;
                }
                else if (lineNumber == 96 && columnNumber == 31)
                {
                    this.obj11.Click -= obj11Click;
                }
                else if (lineNumber == 97 && columnNumber == 31)
                {
                    this.obj12.Click -= obj12Click;
                }
                else if (lineNumber == 98 && columnNumber == 31)
                {
                    this.obj13.Click -= obj13Click;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8: // Views\Services\HeartRateServicePage.xaml line 90
                        this.obj8 = (global::Template10.Controls.PageHeader)target;
                        break;
                    case 9: // Views\Services\HeartRateServicePage.xaml line 108
                        this.obj9 = (global::BluetoothLEExplorer.CustomControls.GattLocalCharacteristicControl)target;
                        break;
                    case 10: // Views\Services\HeartRateServicePage.xaml line 105
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    case 11: // Views\Services\HeartRateServicePage.xaml line 96
                        this.obj11 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj11Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoSettings();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj11Click;
                        break;
                    case 12: // Views\Services\HeartRateServicePage.xaml line 97
                        this.obj12 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj12Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoPrivacy();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj12Click;
                        break;
                    case 13: // Views\Services\HeartRateServicePage.xaml line 98
                        this.obj13 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj13Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoAbout();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj13Click;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IHeartRateServicePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Views.HeartRateServicePage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Views.HeartRateServicePage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Service(obj.Service, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_HeartRateMeasurement(obj.HeartRateMeasurement, phase);
                        this.Update_ViewModel_ServiceVM(obj.ServiceVM, phase);
                    }
                }
            }
            private void Update_ViewModel_Service(global::GattServicesLibrary.Services.HeartRateService obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Service_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_ViewModel_Service_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Services\HeartRateServicePage.xaml line 90
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Template10_Controls_PageHeader_Text(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_HeartRateMeasurement(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_HeartRateMeasurement(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\HeartRateServicePage.xaml line 108
                    if (!isobj9CharacteristicDisabled)
                    {
                        XamlBindingSetters.Set_BluetoothLEExplorer_CustomControls_GattLocalCharacteristicControl_Characteristic(this.obj9, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ServiceVM(global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ServiceVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ServiceVM_IsPublishing(obj.IsPublishing, phase);
                    }
                }
            }
            private void Update_ViewModel_ServiceVM_IsPublishing(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Services\HeartRateServicePage.xaml line 105
                    if (!isobj10IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj10, obj);
                    }
                }
            }
            private void UpdateTwoWay_10_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.ServiceVM != null)
                            {
                                this.dataRoot.ViewModel.ServiceVM.IsPublishing = this.obj10.IsOn;
                            }
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class HeartRateServicePage_obj1_BindingsTracking
            {
                private global::System.WeakReference<HeartRateServicePage_obj1_Bindings> weakRefToBindingObj; 

                public HeartRateServicePage_obj1_BindingsTracking(HeartRateServicePage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<HeartRateServicePage_obj1_Bindings>(obj);
                }

                public HeartRateServicePage_obj1_Bindings TryGetBindingObject()
                {
                    HeartRateServicePage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_HeartRateMeasurement(null);
                    UpdateChildListeners_ViewModel_ServiceVM(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    HeartRateServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_HeartRateMeasurement(obj.HeartRateMeasurement, DATA_CHANGED);
                                bindings.Update_ViewModel_ServiceVM(obj.ServiceVM, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "HeartRateMeasurement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_HeartRateMeasurement(obj.HeartRateMeasurement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ServiceVM":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ServiceVM(obj.ServiceVM, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_HeartRateMeasurement(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    HeartRateServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel cache_ViewModel_HeartRateMeasurement = null;
                public void UpdateChildListeners_ViewModel_HeartRateMeasurement(global::BluetoothLEExplorer.ViewModels.GenericGattCharacteristicViewModel obj)
                {
                    if (obj != cache_ViewModel_HeartRateMeasurement)
                    {
                        if (cache_ViewModel_HeartRateMeasurement != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_HeartRateMeasurement).PropertyChanged -= PropertyChanged_ViewModel_HeartRateMeasurement;
                            cache_ViewModel_HeartRateMeasurement = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_HeartRateMeasurement = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_HeartRateMeasurement;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ServiceVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    HeartRateServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_ServiceVM_IsPublishing(obj.IsPublishing, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsPublishing":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ServiceVM_IsPublishing(obj.IsPublishing, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel cache_ViewModel_ServiceVM = null;
                public void UpdateChildListeners_ViewModel_ServiceVM(global::BluetoothLEExplorer.ViewModels.GenericGattServiceViewModel obj)
                {
                    if (obj != cache_ViewModel_ServiceVM)
                    {
                        if (cache_ViewModel_ServiceVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ServiceVM).PropertyChanged -= PropertyChanged_ViewModel_ServiceVM;
                            cache_ViewModel_ServiceVM = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ServiceVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ServiceVM;
                        }
                    }
                }
                public void RegisterTwoWayListener_10(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_IsOn();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\Services\HeartRateServicePage.xaml line 18
                {
                    this.ViewModel = (global::BluetoothLEExplorer.ViewModels.HeartRateServicePageViewModel)(target);
                }
                break;
            case 3: // Views\Services\HeartRateServicePage.xaml line 52
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 4: // Views\Services\HeartRateServicePage.xaml line 53
                {
                    this.VisualStateDisplayType = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5: // Views\Services\HeartRateServicePage.xaml line 62
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\Services\HeartRateServicePage.xaml line 71
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 7: // Views\Services\HeartRateServicePage.xaml line 79
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 8: // Views\Services\HeartRateServicePage.xaml line 90
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 10: // Views\Services\HeartRateServicePage.xaml line 105
                {
                    this.Switch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Services\HeartRateServicePage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    HeartRateServicePage_obj1_Bindings bindings = new HeartRateServicePage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

