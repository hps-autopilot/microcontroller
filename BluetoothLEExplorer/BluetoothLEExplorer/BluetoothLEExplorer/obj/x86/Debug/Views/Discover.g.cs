#pragma checksum "C:\Users\tilt7\Documents\GitHub\microcontroller\BluetoothLEExplorer\BluetoothLEExplorer\BluetoothLEExplorer\Views\Discover.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "51647B42E214060D9467AE289CE2A516"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BluetoothLEExplorer.Views
{
    partial class Discover : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Data_CollectionViewSource_Source(global::Windows.UI.Xaml.Data.CollectionViewSource obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ProgressBar_IsIndeterminate(global::Windows.UI.Xaml.Controls.ProgressBar obj, global::System.Boolean value)
            {
                obj.IsIndeterminate = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class Discover_obj14_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDiscover_Bindings
        {
            private global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj14;
            private global::Windows.UI.Xaml.Controls.Button obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Documents.Run obj17;
            private global::Windows.UI.Xaml.Documents.Run obj18;
            private global::Windows.UI.Xaml.Documents.Run obj19;
            private global::Windows.UI.Xaml.Documents.Run obj20;
            private global::Windows.UI.Xaml.Documents.Run obj21;
            private global::Windows.UI.Xaml.Documents.Run obj22;
            private global::Windows.UI.Xaml.Documents.Run obj23;
            private global::Windows.UI.Xaml.Controls.TextBlock obj24;
            private global::Windows.UI.Xaml.Documents.Run obj25;
            private global::Windows.UI.Xaml.Documents.Run obj26;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj15Click;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj16VisibilityDisabled = false;
            private static bool isobj17TextDisabled = false;
            private static bool isobj18TextDisabled = false;
            private static bool isobj19TextDisabled = false;
            private static bool isobj20TextDisabled = false;
            private static bool isobj21TextDisabled = false;
            private static bool isobj22TextDisabled = false;
            private static bool isobj23TextDisabled = false;
            private static bool isobj24VisibilityDisabled = false;
            private static bool isobj25TextDisabled = false;
            private static bool isobj26TextDisabled = false;

            private Discover_obj14_BindingsTracking bindingsTracking;

            public Discover_obj14_Bindings()
            {
                this.bindingsTracking = new Discover_obj14_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 240 && columnNumber == 53)
                {
                    this.obj15.Click -= obj15Click;
                }
                else if (lineNumber == 232 && columnNumber == 44)
                {
                    isobj16VisibilityDisabled = true;
                }
                else if (lineNumber == 236 && columnNumber == 48)
                {
                    isobj17TextDisabled = true;
                }
                else if (lineNumber == 233 && columnNumber == 57)
                {
                    isobj18TextDisabled = true;
                }
                else if (lineNumber == 230 && columnNumber == 50)
                {
                    isobj19TextDisabled = true;
                }
                else if (lineNumber == 227 && columnNumber == 53)
                {
                    isobj20TextDisabled = true;
                }
                else if (lineNumber == 224 && columnNumber == 53)
                {
                    isobj21TextDisabled = true;
                }
                else if (lineNumber == 221 && columnNumber == 54)
                {
                    isobj22TextDisabled = true;
                }
                else if (lineNumber == 218 && columnNumber == 48)
                {
                    isobj23TextDisabled = true;
                }
                else if (lineNumber == 211 && columnNumber == 65)
                {
                    isobj24VisibilityDisabled = true;
                }
                else if (lineNumber == 212 && columnNumber == 51)
                {
                    isobj25TextDisabled = true;
                }
                else if (lineNumber == 209 && columnNumber == 48)
                {
                    isobj26TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 14: // Views\Discover.xaml line 187
                        this.obj14 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 15: // Views\Discover.xaml line 240
                        this.obj15 = (global::Windows.UI.Xaml.Controls.Button)target;
                        this.obj15Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.DoInAppPairing();
                        };
                        ((global::Windows.UI.Xaml.Controls.Button)target).Click += obj15Click;
                        break;
                    case 16: // Views\Discover.xaml line 232
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17: // Views\Discover.xaml line 236
                        this.obj17 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 18: // Views\Discover.xaml line 233
                        this.obj18 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 19: // Views\Discover.xaml line 230
                        this.obj19 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 20: // Views\Discover.xaml line 227
                        this.obj20 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 21: // Views\Discover.xaml line 224
                        this.obj21 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 22: // Views\Discover.xaml line 221
                        this.obj22 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 23: // Views\Discover.xaml line 218
                        this.obj23 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 24: // Views\Discover.xaml line 211
                        this.obj24 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 25: // Views\Discover.xaml line 212
                        this.obj25 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 26: // Views\Discover.xaml line 209
                        this.obj26 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj14.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IDiscover_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ServiceCount(obj.ServiceCount, phase);
                        this.Update_RSSI(obj.RSSI, phase);
                        this.Update_IsPaired(obj.IsPaired, phase);
                        this.Update_LastSeenTime(obj.LastSeenTime, phase);
                        this.Update_IsConnected(obj.IsConnected, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_BluetoothAddressAsString(obj.BluetoothAddressAsString, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_BatteryLevel(obj.BatteryLevel, phase);
                    }
                }
            }
            private void Update_ServiceCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 233
                    if (!isobj18TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj18, obj.ToString(), null);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Discover.xaml line 232
                    if (!isobj16VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj16, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("CollapsedWhenZero").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_RSSI(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 236
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj17, obj.ToString(), null);
                    }
                    // Views\Discover.xaml line 209
                    if (!isobj26TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj26, obj.ToString(), null);
                    }
                }
            }
            private void Update_IsPaired(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 230
                    if (!isobj19TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj19, obj.ToString(), null);
                    }
                }
            }
            private void Update_LastSeenTime(global::System.DateTime obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 227
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj20, obj.ToString(), null);
                    }
                }
            }
            private void Update_IsConnected(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 224
                    if (!isobj21TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj21, obj.ToString(), null);
                    }
                }
            }
            private void Update_BluetoothAddressAsString(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Discover.xaml line 221
                    if (!isobj22TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj22, obj, null);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 218
                    if (!isobj23TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj23, obj, null);
                    }
                }
            }
            private void Update_BatteryLevel(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 211
                    if (!isobj24VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj24, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("CollapsedWhenNegOne").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    // Views\Discover.xaml line 212
                    if (!isobj25TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj25, obj.ToString(), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Discover_obj14_BindingsTracking
            {
                private global::System.WeakReference<Discover_obj14_Bindings> weakRefToBindingObj; 

                public Discover_obj14_BindingsTracking(Discover_obj14_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Discover_obj14_Bindings>(obj);
                }

                public Discover_obj14_Bindings TryGetBindingObject()
                {
                    Discover_obj14_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Discover_obj14_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj = sender as global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ServiceCount(obj.ServiceCount, DATA_CHANGED);
                                bindings.Update_RSSI(obj.RSSI, DATA_CHANGED);
                                bindings.Update_IsPaired(obj.IsPaired, DATA_CHANGED);
                                bindings.Update_LastSeenTime(obj.LastSeenTime, DATA_CHANGED);
                                bindings.Update_IsConnected(obj.IsConnected, DATA_CHANGED);
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_BatteryLevel(obj.BatteryLevel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ServiceCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ServiceCount(obj.ServiceCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RSSI":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RSSI(obj.RSSI, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaired":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsPaired(obj.IsPaired, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LastSeenTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LastSeenTime(obj.LastSeenTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsConnected":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsConnected(obj.IsConnected, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BatteryLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BatteryLevel(obj.BatteryLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj)
                {
                    Discover_obj14_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class Discover_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDiscover_Bindings
        {
            private global::BluetoothLEExplorer.Views.Discover dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Data.CollectionViewSource obj3;
            private global::Windows.UI.Xaml.Controls.RelativePanel obj9;
            private global::Windows.UI.Xaml.Controls.ProgressBar obj10;
            private global::Windows.UI.Xaml.Controls.Grid obj11;
            private global::Windows.UI.Xaml.Controls.GridView obj12;
            private global::Windows.UI.Xaml.Controls.CheckBox obj28;
            private global::Windows.UI.Xaml.Documents.Run obj29;
            private global::Windows.UI.Xaml.Controls.Button obj30;
            private global::Windows.UI.Xaml.Controls.TextBlock obj31;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj32;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj33;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj34;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj30Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj32Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj33Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj34Click;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3SourceDisabled = false;
            private static bool isobj9VisibilityDisabled = false;
            private static bool isobj10IsEnabledDisabled = false;
            private static bool isobj10IsIndeterminateDisabled = false;
            private static bool isobj10VisibilityDisabled = false;
            private static bool isobj11VisibilityDisabled = false;
            private static bool isobj12ItemsSourceDisabled = false;
            private static bool isobj12SelectedItemDisabled = false;
            private static bool isobj28IsCheckedDisabled = false;
            private static bool isobj29TextDisabled = false;
            private static bool isobj30ContentDisabled = false;
            private static bool isobj31VisibilityDisabled = false;

            private Discover_obj1_BindingsTracking bindingsTracking;

            public Discover_obj1_Bindings()
            {
                this.bindingsTracking = new Discover_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 83 && columnNumber == 78)
                {
                    isobj3SourceDisabled = true;
                }
                else if (lineNumber == 133 && columnNumber == 70)
                {
                    isobj9VisibilityDisabled = true;
                }
                else if (lineNumber == 138 && columnNumber == 22)
                {
                    isobj10IsEnabledDisabled = true;
                }
                else if (lineNumber == 139 && columnNumber == 22)
                {
                    isobj10IsIndeterminateDisabled = true;
                }
                else if (lineNumber == 142 && columnNumber == 22)
                {
                    isobj10VisibilityDisabled = true;
                }
                else if (lineNumber == 144 && columnNumber == 62)
                {
                    isobj11VisibilityDisabled = true;
                }
                else if (lineNumber == 169 && columnNumber == 17)
                {
                    isobj12ItemsSourceDisabled = true;
                }
                else if (lineNumber == 170 && columnNumber == 17)
                {
                    isobj12SelectedItemDisabled = true;
                }
                else if (lineNumber == 155 && columnNumber == 60)
                {
                    isobj28IsCheckedDisabled = true;
                }
                else if (lineNumber == 164 && columnNumber == 26)
                {
                    isobj29TextDisabled = true;
                }
                else if (lineNumber == 152 && columnNumber == 29)
                {
                    isobj30ContentDisabled = true;
                }
                else if (lineNumber == 152 && columnNumber == 146)
                {
                    this.obj30.Click -= obj30Click;
                }
                else if (lineNumber == 153 && columnNumber == 60)
                {
                    isobj31VisibilityDisabled = true;
                }
                else if (lineNumber == 126 && columnNumber == 31)
                {
                    this.obj32.Click -= obj32Click;
                }
                else if (lineNumber == 127 && columnNumber == 31)
                {
                    this.obj33.Click -= obj33Click;
                }
                else if (lineNumber == 128 && columnNumber == 31)
                {
                    this.obj34.Click -= obj34Click;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\Discover.xaml line 83
                        this.obj3 = (global::Windows.UI.Xaml.Data.CollectionViewSource)target;
                        break;
                    case 9: // Views\Discover.xaml line 133
                        this.obj9 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                        break;
                    case 10: // Views\Discover.xaml line 137
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ProgressBar)target;
                        break;
                    case 11: // Views\Discover.xaml line 144
                        this.obj11 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 12: // Views\Discover.xaml line 168
                        this.obj12 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        this.bindingsTracking.RegisterTwoWayListener_12(this.obj12);
                        break;
                    case 28: // Views\Discover.xaml line 155
                        this.obj28 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_28(this.obj28);
                        break;
                    case 29: // Views\Discover.xaml line 164
                        this.obj29 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 30: // Views\Discover.xaml line 152
                        this.obj30 = (global::Windows.UI.Xaml.Controls.Button)target;
                        this.obj30Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.ToggleEnumeration();
                        };
                        ((global::Windows.UI.Xaml.Controls.Button)target).Click += obj30Click;
                        break;
                    case 31: // Views\Discover.xaml line 153
                        this.obj31 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 32: // Views\Discover.xaml line 126
                        this.obj32 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj32Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoSettings();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj32Click;
                        break;
                    case 33: // Views\Discover.xaml line 127
                        this.obj33 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj33Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoPrivacy();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj33Click;
                        break;
                    case 34: // Views\Discover.xaml line 128
                        this.obj34 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj34Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.GotoAbout();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj34Click;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IDiscover_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Views.Discover)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Views.Discover obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::BluetoothLEExplorer.ViewModels.DiscoverViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_DeviceList(obj.DeviceList, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsCentralRoleSupported(obj.IsCentralRoleSupported, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsEnumerating(obj.IsEnumerating, phase);
                        this.Update_ViewModel_SelectedDevice(obj.SelectedDevice, phase);
                        this.Update_ViewModel_ContinuousEnumeration(obj.ContinuousEnumeration, phase);
                        this.Update_ViewModel_Context(obj.Context, phase);
                        this.Update_ViewModel_EnumerationFinished(obj.EnumerationFinished, phase);
                    }
                }
            }
            private void Update_ViewModel_DeviceList(global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_DeviceList(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 83
                    if (!isobj3SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Data_CollectionViewSource_Source(this.obj3, obj, null);
                    }
                    // Views\Discover.xaml line 168
                    if (!isobj12ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsCentralRoleSupported(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Discover.xaml line 133
                    if (!isobj9VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenFalseConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    // Views\Discover.xaml line 137
                    if (!isobj10VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    // Views\Discover.xaml line 144
                    if (!isobj11VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_IsEnumerating(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 137
                    if (!isobj10IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                    }
                    // Views\Discover.xaml line 137
                    if (!isobj10IsIndeterminateDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressBar_IsIndeterminate(this.obj10, obj);
                    }
                    // Views\Discover.xaml line 152
                    if (!isobj30ContentDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj30, (global::System.Object)this.LookupConverter("EnumerationBoolToStringConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_ViewModel_SelectedDevice(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedDevice(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 168
                    if (!isobj12SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ContinuousEnumeration(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 155
                    if (!isobj28IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj28, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Context(global::BluetoothLEExplorer.Models.GattSampleContext obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Context(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Context_BluetoothLEDevices(obj.BluetoothLEDevices, phase);
                    }
                }
            }
            private void Update_ViewModel_Context_BluetoothLEDevices(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Context_BluetoothLEDevices(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Context_BluetoothLEDevices_Count(obj.Count, phase);
                    }
                }
            }
            private void Update_ViewModel_Context_BluetoothLEDevices_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 164
                    if (!isobj29TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj29, obj.ToString(), null);
                    }
                }
            }
            private void Update_ViewModel_EnumerationFinished(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Discover.xaml line 153
                    if (!isobj31VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj31, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void UpdateTwoWay_12_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedDevice = (global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice)this.obj12.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_28_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.ContinuousEnumeration = (global::System.Boolean)this.obj28.IsChecked;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Discover_obj1_BindingsTracking
            {
                private global::System.WeakReference<Discover_obj1_Bindings> weakRefToBindingObj; 

                public Discover_obj1_BindingsTracking(Discover_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Discover_obj1_Bindings>(obj);
                }

                public Discover_obj1_Bindings TryGetBindingObject()
                {
                    Discover_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_DeviceList(null);
                    UpdateChildListeners_ViewModel_SelectedDevice(null);
                    UpdateChildListeners_ViewModel_Context(null);
                    UpdateChildListeners_ViewModel_Context_BluetoothLEDevices(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Discover_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.DiscoverViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.DiscoverViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_DeviceList(obj.DeviceList, DATA_CHANGED);
                                bindings.Update_ViewModel_IsEnumerating(obj.IsEnumerating, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedDevice(obj.SelectedDevice, DATA_CHANGED);
                                bindings.Update_ViewModel_ContinuousEnumeration(obj.ContinuousEnumeration, DATA_CHANGED);
                                bindings.Update_ViewModel_Context(obj.Context, DATA_CHANGED);
                                bindings.Update_ViewModel_EnumerationFinished(obj.EnumerationFinished, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "DeviceList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DeviceList(obj.DeviceList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEnumerating":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsEnumerating(obj.IsEnumerating, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDevice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedDevice(obj.SelectedDevice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ContinuousEnumeration":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ContinuousEnumeration(obj.ContinuousEnumeration, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Context":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Context(obj.Context, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnumerationFinished":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EnumerationFinished(obj.EnumerationFinished, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.DiscoverViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::BluetoothLEExplorer.ViewModels.DiscoverViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_DeviceList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Discover_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj = sender as global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_DeviceList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Discover_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj = sender as global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>;
                    }
                }
                private global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> cache_ViewModel_DeviceList = null;
                public void UpdateChildListeners_ViewModel_DeviceList(global::SortedObservableCollection.SortedObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj)
                {
                    if (obj != cache_ViewModel_DeviceList)
                    {
                        if (cache_ViewModel_DeviceList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_DeviceList).PropertyChanged -= PropertyChanged_ViewModel_DeviceList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_DeviceList).CollectionChanged -= CollectionChanged_ViewModel_DeviceList;
                            cache_ViewModel_DeviceList = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_DeviceList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_DeviceList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_DeviceList;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedDevice(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Discover_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj = sender as global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice cache_ViewModel_SelectedDevice = null;
                public void UpdateChildListeners_ViewModel_SelectedDevice(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj)
                {
                    if (obj != cache_ViewModel_SelectedDevice)
                    {
                        if (cache_ViewModel_SelectedDevice != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedDevice).PropertyChanged -= PropertyChanged_ViewModel_SelectedDevice;
                            cache_ViewModel_SelectedDevice = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedDevice = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedDevice;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Context(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Discover_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.GattSampleContext obj = sender as global::BluetoothLEExplorer.Models.GattSampleContext;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Context_BluetoothLEDevices(obj.BluetoothLEDevices, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "BluetoothLEDevices":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Context_BluetoothLEDevices(obj.BluetoothLEDevices, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.Models.GattSampleContext cache_ViewModel_Context = null;
                public void UpdateChildListeners_ViewModel_Context(global::BluetoothLEExplorer.Models.GattSampleContext obj)
                {
                    if (obj != cache_ViewModel_Context)
                    {
                        if (cache_ViewModel_Context != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Context).PropertyChanged -= PropertyChanged_ViewModel_Context;
                            cache_ViewModel_Context = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Context = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Context;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Context_BluetoothLEDevices(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Discover_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Context_BluetoothLEDevices_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Context_BluetoothLEDevices_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Context_BluetoothLEDevices(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Discover_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice>;
                if (obj != null)
                {
                    bindings.Update_ViewModel_Context_BluetoothLEDevices_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> cache_ViewModel_Context_BluetoothLEDevices = null;
                public void UpdateChildListeners_ViewModel_Context_BluetoothLEDevices(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice> obj)
                {
                    if (obj != cache_ViewModel_Context_BluetoothLEDevices)
                    {
                        if (cache_ViewModel_Context_BluetoothLEDevices != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Context_BluetoothLEDevices).PropertyChanged -= PropertyChanged_ViewModel_Context_BluetoothLEDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Context_BluetoothLEDevices).CollectionChanged -= CollectionChanged_ViewModel_Context_BluetoothLEDevices;
                            cache_ViewModel_Context_BluetoothLEDevices = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Context_BluetoothLEDevices = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Context_BluetoothLEDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Context_BluetoothLEDevices;
                        }
                    }
                }
                public void RegisterTwoWayListener_12(global::Windows.UI.Xaml.Controls.GridView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_12_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_28(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_28_IsChecked();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\Discover.xaml line 19
                {
                    this.ViewModel = (global::BluetoothLEExplorer.ViewModels.DiscoverViewModel)(target);
                }
                break;
            case 3: // Views\Discover.xaml line 83
                {
                    this.SortedDevices = (global::Windows.UI.Xaml.Data.CollectionViewSource)(target);
                }
                break;
            case 4: // Views\Discover.xaml line 90
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 5: // Views\Discover.xaml line 91
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\Discover.xaml line 99
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 7: // Views\Discover.xaml line 107
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 8: // Views\Discover.xaml line 120
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 10: // Views\Discover.xaml line 137
                {
                    this.progressBar = (global::Windows.UI.Xaml.Controls.ProgressBar)(target);
                }
                break;
            case 12: // Views\Discover.xaml line 168
                {
                    this.DevicesListView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 14: // Views\Discover.xaml line 187
                {
                    global::Windows.UI.Xaml.Controls.Grid element14 = (global::Windows.UI.Xaml.Controls.Grid)(target);
                    ((global::Windows.UI.Xaml.Controls.Grid)element14).Holding += this.Grid_Holding;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Discover.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Discover_obj1_Bindings bindings = new Discover_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 14: // Views\Discover.xaml line 187
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element14 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    Discover_obj14_Bindings bindings = new Discover_obj14_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element14.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element14.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element14, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element14, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

